{"version":3,"sources":["utils/validators/validators.ts","Redux/selectors/authSelectors.ts","components/common/FormsControls/FormsControls.tsx","components/Navbar/Navbar.module.css","components/Header/Header.module.css","components/common/FormsControls/FormsControls.module.css","components/common/Preloader/Preloader.tsx","api/ProfileAPI.ts","Redux/reducers/profileReducer.ts","api/api.ts","Redux/reducers/dialogsReducer.ts","utils/helpers/objectHelpers.ts","api/UsersAPI.ts","Redux/reducers/usersReducer.ts","components/common/Preloader/Preloader.module.css","components/Login/LoginForm/LoginForm.tsx","components/Navbar/Navbar.tsx","components/News/News.tsx","components/Music/Music.tsx","components/Settings/Settings.tsx","media/Ava.jpg","components/Header/Header.tsx","api/SecurityAPI.ts","api/AuthAPI.ts","Redux/reducers/authReducer.ts","components/Header/HeaderContainer.tsx","components/Login/Login.tsx","Redux/reducers/appReducer.ts","Redux/redux-store.ts","hoc/withSuspense.tsx","App.tsx","index.tsx"],"names":["composeValidators","validators","value","reduce","error","validator","undefined","required","maxLength","length","getIsAuthSelector","state","auth","isAuth","getLoginSelector","login","getUserIdSelector","userId","FormControls","meta","touched","children","hasError","className","classes","formControl","Textarea","props","input","restProps","child","Input","module","exports","Preloader","loader","profileAPI","api","get","then","res","data","status","put","photo","formData","FormData","append","headers","profileData","initial","posts","id","message","likes","profile","isFetching","profileStatus","profileReducer","action","type","postText","filter","post","photos","actions","addPost","deletePost","setUserProfile","setIsFetching","setProfileStatus","updatePhotoSuccess","getProfile","dispatch","a","Error","getProfileStatus","updateProfileStatus","response","resultCode","ResultCodesEnum","Success","messages","alert","uploadPhoto","saveProfileData","getState","Promise","reject","ResultCodeForCaptchaEnum","axios","create","withCredentials","baseURL","dialogs","name","dialogsReducer","messageText","sendMessage","updateObjectInArray","items","itemId","objPropName","newObjProps","map","item","usersAPI","pageSize","pageNumber","term","friend","delete","users","totalUsersCount","currentPage","followingInProgress","usersReducer","followed","payload","_followUnfollowFlow","apiMethod","actionCreator","getUsersList","page","totalCount","follow","unfollow","LoginFormFields","Navbar","nav","to","link","activeClassName","active","News","Music","Settings","Header","logout","header","logo","src","ava","alt","loginBlock","onClick","securityAPI","authAPI","email","captchaUrl","me","getCaptcha","url","HeaderContainer","this","React","Component","connect","LoginForm","onSubmit","handleSubmit","placeholder","component","validate","password","rememberMe","captcha","CaptchaIsRequired","initialized","rootReducer","combineReducers","profilePage","dialogsPage","usersPage","app","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunk","withSuspense","WrappedComponent","loading","Suspense","fallback","DialogsContainer","lazy","ProfileContainer","UsersContainer","SuspendedDialogsContainer","SuspendedProfileContainer","SuspendedUsersContainer","App","initializeApp","render","path","exact","from","AppContainer","withRouter","promise","all","SocialApp","StrictMode","ReactDOM","document","getElementById"],"mappings":"iGAEA,sGAAO,IAAMA,EAAoB,sCAAIC,EAAJ,yBAAIA,EAAJ,uBAAwB,SAACC,GAAD,OACrDD,EAAWE,QAAO,SAACC,EAAeC,GAAhB,OAAmCD,GAASC,EAAUH,UAAQI,KAEvEC,EAA+B,SAACL,GACzC,IAAIA,EAIJ,MAAO,qBAGEM,EAAY,SAACA,GAAD,OAA2C,SAACN,GACjE,GAAIA,EAAMO,OAASD,EACf,MAAM,iBAAN,OAAwBA,EAAxB,e,gCCbR,sGAAO,IAAME,EAAoB,SAACC,GAC9B,OAAOA,EAAMC,KAAKC,QAGTC,EAAmB,SAACH,GAC7B,OAAOA,EAAMC,KAAKG,OAGTC,EAAoB,SAACL,GAC9B,OAAOA,EAAMC,KAAKK,S,sJCDhBC,EAAgC,SAAC,GAAkD,IAAD,IAAhDC,KAAOC,EAAyC,EAAzCA,QAAShB,EAAgC,EAAhCA,MAAQiB,EAAwB,EAAxBA,SACtDC,GAD8E,mCACnEF,GAAWhB,GAE5B,OACI,sBAAKmB,UAAWC,IAAQC,YAAc,KAAOH,EAAWE,IAAQpB,MAAQ,IAAxE,UACI,8BACKiB,IAEJC,GACD,8BACI,+BAAOlB,UAOVsB,EAAW,SAACC,GAAgB,IAC9BC,EAAoCD,EAApCC,MAAuBC,GAAaF,EAA7BR,KAA6BQ,EAAvBG,MADgB,YACOH,EADP,2BAGpC,OAAO,cAACT,EAAD,2BAAkBS,GAAlB,aAAyB,oDAAcC,GAAWC,QAGhDE,EAAQ,SAACJ,GAAgB,IAC3BC,EAAoCD,EAApCC,MAAuBC,GAAaF,EAA7BR,KAA6BQ,EAAvBG,MADa,YACUH,EADV,2BAGjC,OAAO,cAACT,EAAD,2BAAkBS,GAAlB,aAAyB,iDAAWC,GAAWC,S,mBCnC1DG,EAAOC,QAAU,CAAC,IAAM,oBAAoB,KAAO,qBAAqB,OAAS,yB,mBCAjFD,EAAOC,QAAU,CAAC,OAAS,uBAAuB,KAAO,qBAAqB,WAAa,6B,mBCA3FD,EAAOC,QAAU,CAAC,YAAc,mCAAmC,MAAQ,+B,mECQ5DC,IANG,WACd,OACI,qBAAKX,UAAWC,IAAQW,W,+TCGnBC,EAAa,SACRnB,GACV,OAAOoB,IAAIC,IAAJ,kBAAgCrB,IAClCsB,MAAK,SAAAC,GAAG,OAAIA,EAAIC,SAHhBL,EAAa,SAKLnB,GACb,OAAOoB,IAAIC,IAAJ,yBAAkCrB,IAAUsB,MAAK,SAAAC,GAAG,OAAIA,EAAIC,SAN9DL,EAAa,SAQFM,GAChB,OAAOL,IAAIM,IAAJ,iBAA2C,CAC9CD,OAAQA,IAEPH,MAAK,SAAAC,GAAG,OAAIA,MAZZJ,EAAa,SAcVQ,GACR,IAAMC,EAAW,IAAIC,SAIrB,OAFAD,EAASE,OAAO,QAASH,GAElBP,IAAIM,IAAJ,gBAAuEE,EAAU,CACpFG,QAAS,CACL,eAAgB,yBAGnBT,MAAK,SAAAC,GAAG,OAAIA,EAAIC,SAxBhBL,EAAa,SA0BVa,GACR,OAAOZ,IAAIM,IAAJ,UAAiDM,GACnDV,MAAK,SAAAC,GAAG,OAAIA,EAAIC,SCvBvBS,EAAU,CACZC,MAAO,CACH,CACIC,GAAI,EACJC,QAAS,YACTC,MAAO,GACR,CACCF,GAAI,EACJC,QAAS,sBACTC,MAAO,IAGfC,QAAS,KACTC,YAAY,EACZC,cAAe,IAGNC,EAAiB,WAAwD,IAAvD/C,EAAsD,uDAA9CuC,EAASS,EAAqC,uCACjF,OAAQA,EAAOC,MACX,IAAK,0BACD,OAAO,2BACAjD,GADP,IAEIwC,MAAM,GAAD,mBAAMxC,EAAMwC,OAAZ,CAAmB,CACpBC,GAAI,EACJC,QAASM,EAAOE,SAChBP,MAAO,OAInB,IAAK,kCACD,OAAO,2BACA3C,GADP,IAEI4C,QAASI,EAAOJ,UAGxB,IAAK,6BACD,OAAO,2BACA5C,GADP,IAEIwC,MAAOxC,EAAMwC,MAAMW,QAAO,SAAAC,GAAI,OAAIA,EAAKX,KAAOO,EAAOP,QAG7D,IAAK,iCACD,OAAO,2BACAzC,GADP,IAEI6C,WAAYG,EAAOH,aAG3B,IAAK,oCACD,OAAO,2BACA7C,GADP,IAEI8C,cAAeE,EAAOF,gBAG9B,IAAK,sCACD,OAAO,2BACA9C,GADP,IAEI4C,QAAQ,2BACD5C,EAAM4C,SADN,IAEHS,OAAQL,EAAOK,WAI3B,QACI,OAAOrD,IAKNsD,EAAU,CACnBC,QAAS,SAACL,GAAD,MAAuB,CAC5BD,KAAM,0BACNC,SAAUA,IAEdM,WAAY,SAACf,GAAD,MAAiB,CACzBQ,KAAM,6BACNR,GAAIA,IAERgB,eAAgB,SAACb,GAAD,MAA2B,CACvCK,KAAM,kCACNL,QAASA,IAEbc,cAAe,SAACb,GAAD,MAA0B,CACrCI,KAAM,iCACNJ,WAAYA,IAEhBc,iBAAkB,SAACb,GAAD,MAA4B,CAC1CG,KAAM,oCACNH,cAAeA,IAEnBc,mBAAoB,SAACP,GAAD,MAAyB,CACzCJ,KAAM,sCACNI,OAAQA,KAIHQ,EAAa,SAACvD,GAAD,8CAA+B,WAAOwD,GAAP,eAAAC,EAAA,yDACrDD,EAASR,EAAQI,eAAc,KAE3BpD,EAHiD,gCAI9BmB,EAAyBnB,GAJK,OAI3CwB,EAJ2C,OAMjDgC,EAASR,EAAQG,eAAe3B,IANiB,4BAQ3C,IAAIkC,MAAM,0BARiC,OAWrDF,EAASR,EAAQI,eAAc,IAXsB,4CAA/B,uDAcbO,EAAmB,SAAC3D,GAAD,8CAA+B,WAAOwD,GAAP,eAAAC,EAAA,sEAC/BtC,EAA4BnB,GADG,OACrDwC,EADqD,OAG3DgB,EAASR,EAAQK,iBAAiBb,IAHyB,2CAA/B,uDAMnBoB,EAAsB,SAACpB,GAAD,8CAAsC,WAAOgB,GAAP,eAAAC,EAAA,+EAE1CtC,EAA+BqB,GAFW,QAE3DqB,EAF2D,QAIpDrC,KAAKsC,aAAeC,IAAgBC,QAC7CR,EAASR,EAAQK,iBAAiBb,IAE9BqB,EAASrC,KAAKyC,SAASzE,QACvB0E,MAAML,EAASrC,KAAKyC,SAAS,IAR4B,gDAYjEC,MAAM,KAAM9B,SAZqD,yDAAtC,uDAgBtB+B,EAAc,SAACxC,GAAD,8CAA4B,WAAO6B,GAAP,eAAAC,EAAA,sEAChCtC,EAAuBQ,GADS,QAC7CH,EAD6C,QAG1CsC,aAAeC,IAAgBC,QACpCR,EAASR,EAAQM,mBAAmB9B,EAAKA,KAAKuB,SAE1CvB,EAAKyC,SAASzE,QACd0E,MAAM1C,EAAKyC,SAAS,IAPuB,2CAA5B,uDAYdG,EAAkB,SAACpC,GAAD,8CAAyC,WAAOwB,EAAUa,GAAjB,mBAAAZ,EAAA,6DAC9DzD,EAASqE,IAAW1E,KAAKK,OADqC,SAEjDmB,EAAuBa,GAF0B,WAE9DR,EAF8D,QAI3DsC,aAAeC,IAAgBC,QAJ4B,qBAK5DhE,EAL4D,iCAMtDwD,EAASD,EAAWvD,IANkC,qCAQtD,IAAI0D,MAAM,0BAR4C,+CAW5DlC,EAAKyC,gBAXuD,aAW5D,EAAezE,QAX6C,wBAY5D0E,MAAM1C,EAAKyC,SAAS,IAZwC,UAatDK,QAAQC,OAAO/C,EAAKyC,SAAS,IAbyB,4CAAzC,0D,+BC5J/B,0GAWYF,EAKAS,EAhBZ,QAGapD,EAHb,OAGmBqD,EAAMC,OAAO,CAC5BC,iBAAiB,EACjB5C,QAAS,CACL,UAAW,wCAEf6C,QAAS,mD,SAGDb,O,qBAAAA,I,kBAAAA,M,cAKAS,O,2CAAAA,M,6HCPNvC,EAAU,CACZ4C,QAAS,CACL,CACI1C,GAAI,EACJ2C,KAAM,QACP,CACC3C,GAAI,EACJ2C,KAAM,WAGdb,SAAU,CACN,CACI9B,GAAI,EACJC,QAAS,OACV,CACCD,GAAI,EACJC,QAAS,OACV,CACCD,GAAI,EACJC,QAAS,oBACV,CACCD,GAAI,EACJC,QAAS,kBAKR2C,EAAiB,WAAwD,IAAvDrF,EAAsD,uDAA9CuC,EAASS,EAAqC,uCACjF,OAAQA,EAAOC,MACX,IAAK,8BACD,OAAO,2BACAjD,GADP,IAEIuE,SAAS,GAAD,mBAAMvE,EAAMuE,UAAZ,CAAsB,CAC1B9B,GAAI,EACJC,QAASM,EAAOsC,iBAI5B,QACI,OAAOtF,IAONsD,EAAU,CACnBiC,YAAa,SAACD,GAAD,MAA0B,CACnCrC,KAAM,8BACNqC,YAAaA,M,yNC1DRE,EAAsB,SAACC,EAAmBC,EAAgBC,EAAqBC,GACxF,OAAOH,EAAMI,KAAI,SAAAC,GACb,OAAIA,EAAKH,KAAiBD,EACf,2BACAI,GACAF,GAIJE,MCNFC,EAAW,WACsE,IAAjFC,EAAgF,uDAArE,EAAGC,EAAkE,uDAArD,EAAGC,EAAkD,uDAAnC,GAAIC,EAA+B,uDAAN,KAC/E,OAAOzE,IAAIC,IAAkB,sBAAeqE,EAAf,iBAAgCC,EAAhC,iBAAmDC,IAAqB,OAAXC,EAAA,qBAAkCA,KACvHvE,MAAK,SAAAC,GAAG,OAAIA,EAAIC,SAHhBiE,EAAW,SAKbzF,GACH,OAAOoB,IAAI0B,KAAJ,iBAAoC9C,IACtCsB,MAAK,SAAAC,GAAG,OAAIA,EAAIC,SAPhBiE,EAAW,SASXzF,GACL,OAAOoB,IAAI0E,OAAJ,iBAAsC9F,IACxCsB,MAAK,SAAAC,GAAG,OAAIA,EAAIC,SCIvBS,EAAU,CACZ8D,MAAO,GACPL,SAAU,EACVM,gBAAiB,EACjBC,YAAa,EACb1D,YAAY,EACZ2D,oBAAqB,GACrBrD,OAAQ,CACJ+C,KAAM,GACNC,OAAQ,OAIHM,EAAe,WAAwD,IAAvDzG,EAAsD,uDAA9CuC,EAASS,EAAqC,uCAC/E,OAAQA,EAAOC,MACX,IAAK,sBACD,OAAO,2BACAjD,GADP,IAEIqG,MAAOb,EAAoBxF,EAAMqG,MAAOrD,EAAO1C,OAAQ,KAAM,CAACoG,UAAU,MAGhF,IAAK,wBACD,OAAO,2BACA1G,GADP,IAEIqG,MAAOb,EAAoBxF,EAAMqG,MAAOrD,EAAO1C,OAAQ,KAAM,CAACoG,UAAU,MAGhF,IAAK,yBACD,OAAO,2BACA1G,GADP,IAEIqG,MAAOrD,EAAOqD,QAGtB,IAAK,qCACD,OAAO,2BACArG,GADP,IAEIsG,gBAAiBtD,EAAOsD,kBAGhC,IAAK,gCACD,OAAO,2BACAtG,GADP,IAEIuG,YAAavD,EAAOuD,cAG5B,IAAK,+BACD,OAAO,2BACAvG,GADP,IAEI6C,WAAYG,EAAOH,aAG3B,IAAK,yCACD,OAAO,2BACA7C,GADP,IAEIwG,oBAAqBxD,EAAOH,WAAP,sBACX7C,EAAMwG,qBADK,CACgBxD,EAAO1C,SACtCN,EAAMwG,oBAAoBrD,QAAO,SAAAV,GAAE,OAAIA,IAAOO,EAAO1C,YAGnE,IAAK,0BACD,OAAO,2BACAN,GADP,IAEImD,OAAQH,EAAO2D,UAGvB,QACI,OAAO3G,IAKNsD,EACM,SAAChD,GAAD,MAAqB,CAChC2C,KAAM,sBACN3C,OAAQA,IAHHgD,EAKQ,SAAChD,GAAD,MAAqB,CAClC2C,KAAM,wBACN3C,OAAQA,IAPHgD,EASC,SAAC+C,GAAD,MAA6B,CACnCpD,KAAM,yBACNoD,MAAOA,IAXF/C,EAaW,SAACgD,GAAD,MAA8B,CAC9CrD,KAAM,qCACNqD,gBAAiBA,IAfZhD,EAiBO,SAACiD,GAAD,MAA0B,CACtCtD,KAAM,gCACNsD,YAAaA,IAnBRjD,EAqBM,SAACT,GAAD,MAA0B,CACrCI,KAAM,+BACNJ,WAAYA,IAvBPS,EAyBe,SAACT,EAAqBvC,GAAtB,MAA0C,CAC9D2C,KAAM,yCACNJ,WAAYA,EACZvC,OAAQA,IA5BHgD,EA8BE,SAACH,GAAD,MAAyB,CAChCF,KAAM,0BACN0D,QAASxD,IAIXyD,EAAmB,uCAAG,WACxB9C,EACAxD,EACAuG,EACAC,GAJwB,eAAA/C,EAAA,sEAML8C,EAAUvG,GANL,OAMlBwB,EANkB,OAQxBgC,EAASR,GAA+B,EAAMhD,IAG1CwB,EAAKsC,aAAeC,IAAgBC,SACpCR,EAASgD,EAAcxG,IAG3BwD,EAASR,GAA+B,EAAOhD,IAfvB,2CAAH,4DAkBZyG,EAAe,SAACf,EAAkBgB,EAAc7D,GAAjC,8CAAmE,WAAOW,GAAP,eAAAC,EAAA,6DAC3FD,EAASR,GAAsB,IAC/BQ,EAASR,EAAkBH,IAC3BW,EAASR,EAAuB0D,IAH2D,SAKxEjB,EAAkBC,EAAUgB,EAAM7D,EAAO+C,KAAM/C,EAAOgD,QALkB,OAKrFrE,EALqF,OAO3FgC,EAASR,EAAiBxB,EAAK2D,QAC/B3B,EAASR,EAA2BxB,EAAKmF,aACzCnD,EAASR,GAAsB,IAT4D,2CAAnE,uDAYf4D,EAAS,SAAC5G,GAAD,8CAA+B,WAAOwD,GAAP,SAAAC,EAAA,sEAC3C6C,EAAoB9C,EAAUxD,EAAQyF,EAAiBzC,GADZ,2CAA/B,uDAIT6D,EAAW,SAAC7G,GAAD,8CAA+B,WAAOwD,GAAP,SAAAC,EAAA,sEAC7C6C,EAAoB9C,EAAUxD,EAAQyF,EAAmBzC,GADZ,2CAA/B,wD,mBC9JxBjC,EAAOC,QAAU,CAAC,OAAS,0BAA0B,KAAO,0B,qFCUvD8F,E,iHCyBUC,EAhCA,WAiBX,OACI,qBAAKzG,UAAWC,IAAQyG,IAAxB,SAjBU,CACV,CACIC,GAAI,WACJnC,KAAM,WACP,CACCmC,GAAI,WACJnC,KAAM,WACP,CACCmC,GAAI,SACJnC,KAAM,SACP,CACCmC,GAAI,YACJnC,KAAM,aAMCS,KAAI,SAAA2B,GACP,OACI,qBAAK5G,UAAWC,IAAQiF,KAAxB,SACI,cAAC,IAAD,CAASyB,GAAIC,EAAKD,GAAIE,gBAAiB5G,IAAQ6G,OAA/C,SACKF,EAAKpC,QAFqBoC,EAAKD,UCf7CI,EARF,WACT,OACI,wCCMOC,EARD,WACV,OACI,yCCMOC,EARE,WACb,OACI,4C,iBCJO,MAA0B,gCC6B1BC,EAlBiB,SAAC,GAA6B,IAA5B5H,EAA2B,EAA3BA,OAAQE,EAAmB,EAAnBA,MAAO2H,EAAY,EAAZA,OAC7C,OACI,sBAAKnH,UAAWC,IAAQmH,OAAxB,UACI,qBAAKpH,UAAWC,IAAQoH,KAAMC,IAAKC,EAAKC,IAAK,SAC7C,qBAAKxH,UAAWC,IAAQwH,WAAxB,SACKnI,EACK,gCAAME,EACJ,wBAAQkI,QAASP,EAAjB,uBAEF,cAAC,IAAD,CAASR,GAAI,SAAb,yB,6CCdTgB,EAAc,WAEnB,OAAO7G,IAAIC,IAAJ,4BACFC,MAAK,SAAAC,GAAG,OAAIA,MCUZ2G,EAAU,WAEf,OAAO9G,IAAIC,IAAJ,WACFC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,SAHhB0G,EAAU,SAKbtG,GACF,OAAOR,IAAI0B,KAAJ,aAA2GlB,GAC7GN,MAAK,SAAAC,GAAG,OAAIA,EAAIC,SAPhB0G,EAAU,WAUf,OAAO9G,IAAI0E,OAAJ,cACFxE,MAAK,SAAAC,GAAG,OAAIA,EAAIC,SCbvBS,EAAU,CACZjC,OAAQ,KACRmI,MAAO,KACPrI,MAAO,KACPF,QAAQ,EACRwI,WAAY,MAiCHpF,EACQ,SAAChD,EAAuBmI,EAAsBrI,EAAsBF,GAApE,MAAyF,CACtG+C,KAAM,iCACN0D,QAAS,CAACrG,SAAQmI,QAAOrI,QAAOF,YAH3BoD,EAKa,SAACoF,GAAD,MAAgC,CAClDzF,KAAM,sCACNyF,WAAYA,IAIPC,EAAK,yDAAiB,WAAO7E,GAAP,uBAAAC,EAAA,sEACZyE,IADY,QACzB1G,EADyB,QAGtBsC,aAAeC,IAAgBC,UAAU,EACnBxC,EAAKA,KAAzBW,EADsC,EACtCA,GAAIgG,EADkC,EAClCA,MAAOrI,EAD2B,EAC3BA,MAElB0D,EAASR,EAAwBb,EAAIgG,EAAOrI,GAAO,KANxB,2CAAjB,uDA2BLwI,EAAa,yDAAiB,WAAO9E,GAAP,iBAAAC,EAAA,sEAChBwE,IADgB,OACjCpE,EADiC,OAEjCuE,EAAavE,EAASrC,KAAK+G,IAEjC/E,EAASR,EAA6BoF,IAJC,2CAAjB,uD,QC3EpBI,E,uKACQ,IAAD,EAC2BC,KAAK/H,MAA9B+G,EADF,EACEA,OAAQ3H,EADV,EACUA,MAAOF,EADjB,EACiBA,OACtB,OACI,cAAC,EAAD,CACI6H,OAAQA,EACR7H,OAAQA,EACRE,MAAOA,Q,GAPO4I,IAAMC,WAqBrBC,eARS,SAAClJ,GACrB,MAAO,CACHE,OAAQH,YAAkBC,GAC1BI,MAAOD,YAAiBH,MAKyD,CACrF+H,OD6DkB,yDAAiB,WAAOjE,GAAP,iBAAAC,EAAA,sEAChByE,IADgB,QAC7B1G,EAD6B,QAG1BsC,aAAeC,IAAgBC,QACpCR,EAASR,EAAwB,KAAM,KAAM,MAAM,KAEnD,UAAIxB,EAAKyC,gBAAT,aAAI,EAAezE,SACf0E,MAAM1C,EAAKyC,SAAS,IAPO,2CAAjB,wDC9DP2E,CAEZJ,G,yCV9BE1B,K,cAAAA,E,oBAAAA,E,wBAAAA,E,mBAAAA,M,KAOL,IA4Ce+B,EA5CoB,SAAC,GAA4B,IAA3BC,EAA0B,EAA1BA,SAAUV,EAAgB,EAAhBA,WAC3C,OACI,cAAC,IAAD,CAAMU,SAAUA,EAAhB,SACK,SAACpI,GACE,OACI,uBAAMoI,SAAUpI,EAAMqI,aAAcjE,KAAM,YAA1C,UACI,8BACI,cAAC,IAAD,CACIA,KAAMgC,EAAgBqB,MACtBa,YAAa,QACbC,UAAWnI,IACXoI,SAAUnK,YAAkBO,IAAUC,YAAU,SAGxD,8BACI,cAAC,IAAD,CACIuF,KAAMgC,EAAgBqC,SACtBH,YAAa,WACbrG,KAAM,WACNsG,UAAWnI,IACXoI,SAAUnK,YAAkBO,IAAUC,YAAU,SAGxD,gCACI,cAAC,IAAD,CAAOuF,KAAMgC,EAAgBsC,WAAYzG,KAAM,WAAYsG,UAAWnI,MAD1E,kBAGCsH,GACD,gCACI,qBAAKR,IAAKQ,EAAYN,IAAI,YAC1B,8BACI,cAAC,IAAD,CAAOhD,KAAMgC,EAAgBuC,QAAS1G,KAAM,OAAQsG,UAAW,eAIvE,8BACI,oDWTbL,eAPS,SAAClJ,GACrB,MAAO,CACHE,OAAQH,YAAkBC,GAC1B0I,WAAY1I,EAAMC,KAAKyI,cAKV,CACbtI,MF8Ba,SAAC8B,GAAD,8CAA4C,WAAO4B,GAAP,iBAAAC,EAAA,sEAC1CyE,EAActG,GAD4B,QACvDJ,EADuD,QAGpDsC,aAAeC,IAAgBC,SACpCR,EAAS6E,KACT7E,EAASR,EAA6B,SAElCxB,EAAKsC,aAAeU,IAAyB8E,mBAC7C9F,EAAS8E,MAGb,UAAI9G,EAAKyC,gBAAT,aAAI,EAAezE,SACf0E,MAAM1C,EAAKyC,SAAS,KAZiC,2CAA5C,wDEhCN2E,EAxBgB,SAAC,GAAiC,IAAhC9I,EAA+B,EAA/BA,MAAOF,EAAwB,EAAxBA,OAAQwI,EAAgB,EAAhBA,WAK5C,OAAIxI,EACO,cAAC,IAAD,CAAUqH,GAAI,aAIrB,gCACI,uCACA,cAAC,EAAD,CAAW6B,SAXF,SAAClH,GACd9B,EAAM8B,IAU6BwG,WAAYA,U,QCnBjDnG,EAAU,CACZsH,aAAa,GA0BJvG,EACW,iBAAO,CACvBL,KAAM,mC,0CClCR6G,GAAcC,YAAgB,CAChCC,YAAajH,IACbkH,YAAa5E,IACb6E,UAAWzD,KACXxG,KJuBuB,WAAwD,IAAvDD,EAAsD,uDAA9CuC,EAASS,EAAqC,uCAC9E,OAAQA,EAAOC,MACX,IAAK,iCACD,OAAO,2BACAjD,GACAgD,EAAO2D,SAGlB,IAAK,sCACD,OAAO,2BACA3G,GADP,IAEI0I,WAAY1F,EAAO0F,aAG3B,QACI,OAAO1I,IIrCfmK,IDIsB,WAA6D,IAA5DnK,EAA2D,uDAAnDuC,EAASS,EAA0C,uCAClF,OAAQA,EAAOC,MACX,IAAK,iCACD,OAAO,2BACAjD,GADP,IAEI6J,aAAa,IAGrB,QACI,OAAO7J,MCHboK,GAAmBC,OAAOC,sCAAwCC,IAMzDC,GAJDC,YAAYX,GAAaM,GACnCM,YAAgBC,QCxBb,SAASC,GAAkBC,GAC9B,IAAMC,EAAU,6CAEhB,OAAO,SAAC9J,GACJ,OACI,cAAC,IAAM+J,SAAP,CAAgBC,SAAUF,EAA1B,SACI,cAACD,EAAD,eAAsB7J,OCQtC,IAAMiK,GAAmBjC,IAAMkC,MAAK,kBAAM,iCACpCC,GAAmBnC,IAAMkC,MAAK,kBAAM,iCACpCE,GAAiBpC,IAAMkC,MAAK,kBAAM,uDAElCG,GAA4BT,GAAaK,IACzCK,GAA4BV,GAAaO,IACzCI,GAA0BX,GAAaQ,IAOvCI,G,mLAIEC,EAFwB1C,KAAK/H,MAAtByK,mB,+BAQP,OAFsB1C,KAAK/H,MAApB6I,YAOH,sBAAKjJ,UAAW,cAAhB,UACI,cAAC,EAAD,IACA,cAAC,EAAD,IACA,qBAAKA,UAAW,sBAAhB,SACI,eAAC,IAAD,WACI,cAAC,IAAD,CAAO8K,OAAQ,kBAAM,cAACL,GAAD,KAA8BM,KAAM,aACzD,cAAC,IAAD,CAAOD,OAAQ,kBAAM,cAACJ,GAAD,KAA8BK,KAAM,sBACzD,cAAC,IAAD,CAAOD,OAAQ,kBAAM,cAACH,GAAD,KAA4BI,KAAM,WACvD,cAAC,IAAD,CAAOD,OAAQ,kBAAM,cAAC,EAAD,KAASC,KAAM,UACpC,cAAC,IAAD,CAAOD,OAAQ,kBAAM,cAAC,EAAD,KAAUC,KAAM,WACrC,cAAC,IAAD,CAAOD,OAAQ,kBAAM,cAAC,EAAD,KAAaC,KAAM,cACxC,cAAC,IAAD,CAAOD,OAAQ,kBAAM,cAAC,EAAD,KAAUC,KAAM,WACrC,cAAC,IAAD,CAAUC,OAAK,EAACC,KAAK,IAAItE,GAAG,qBAhBjC,cAAChG,EAAA,EAAD,Q,GAXDyH,IAAMC,WAyClB6C,GAAevB,YACjBwB,IACA7C,aARoB,SAAClJ,GACrB,MAAO,CACH6J,YAAa7J,EAAMmK,IAAIN,eAMF,CAAC4B,cH1BD,kBAAM,SAAC3H,GAChC,IAAMkI,EAAUlI,EAAS6E,KAEzB/D,QAAQqH,IAAI,CAACD,IACRpK,MAAK,WACFkC,EAASR,YGmBAiH,CAGnBiB,IAcaU,GAZa,WACxB,OACI,cAAC,IAAMC,WAAP,UACI,cAAC,IAAD,UACI,cAAC,IAAD,CAAU3B,MAAOA,GAAjB,SACI,cAACsB,GAAD,WC3EpBM,IAASV,OAAO,cAAC,GAAD,IAAcW,SAASC,eAAe,W","file":"static/js/main.0f2a3ef3.chunk.js","sourcesContent":["export type FieldValidatorType = (value: string) => string | undefined\n\nexport const composeValidators = (...validators: any) => (value: string) =>\n    validators.reduce((error: string, validator: any) => error || validator(value), undefined);\n\nexport const required: FieldValidatorType = (value) => {\n    if (value) {\n        return undefined;\n    }\n\n    return 'Field is required';\n}\n\nexport const maxLength = (maxLength: number): FieldValidatorType => (value) => {\n    if (value.length > maxLength) {\n        return `Max length is ${maxLength} symbols`;\n    }\n\n    return undefined;\n}","import {AppStateType} from \"../redux-store\";\n\nexport const getIsAuthSelector = (state: AppStateType) => {\n    return state.auth.isAuth;\n}\n\nexport const getLoginSelector = (state: AppStateType) => {\n    return state.auth.login;\n}\n\nexport const getUserIdSelector = (state: AppStateType) => {\n    return state.auth.userId;\n}","import React from 'react';\nimport classes from './FormsControls.module.css';\n\ntype Props = {\n    meta: {\n        touched: boolean,\n        error: string\n    }\n}\n\nconst FormControls: React.FC<Props> = ({meta: {touched, error}, children, ...props}) => {\n    const hasError = touched && error;\n\n    return (\n        <div className={classes.formControl + ' ' + (hasError ? classes.error : '')}>\n            <div>\n                {children}\n            </div>\n            {hasError &&\n            <div>\n                <span>{error}</span>\n            </div>\n            }\n        </div>\n    )\n}\n\nexport const Textarea = (props: any) => {\n    const {input, meta, child, ...restProps} = props;\n\n    return <FormControls {...props}><textarea {...input} {...restProps}/></FormControls>\n}\n\nexport const Input = (props: any) => {\n    const {input, meta, child, ...restProps} = props;\n\n    return <FormControls {...props}><input {...input} {...restProps}/></FormControls>\n}\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"nav\":\"Navbar_nav__2imOE\",\"item\":\"Navbar_item__zmMk4\",\"active\":\"Navbar_active__3mbhk\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__1VCKf\",\"logo\":\"Header_logo__3_SJs\",\"loginBlock\":\"Header_loginBlock__6mma5\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"FormsControls_formControl__3oI2W\",\"error\":\"FormsControls_error__9lcue\"};","import React from 'react';\nimport classes from './Preloader.module.css';\n\nconst Preloader = () => {\n    return (\n        <div className={classes.loader}/>\n    )\n}\n\nexport default Preloader;","import {PhotosType, ProfileType} from \"../types/types\";\nimport {api} from \"./api\";\nimport {APIResponseType} from \"./AuthAPI\";\n\ntype UpdatePhotoResponseDataType = {\n    photos: PhotosType\n}\n\nexport const profileAPI = {\n    getProfileAPI(userId: number) {\n        return api.get<ProfileType>(`profile/${userId}`)\n            .then(res => res.data)\n    },\n    getProfileStatus(userId: number) {\n        return api.get<string>(`profile/status/${userId}`).then(res => res.data)\n    },\n    updateProfileStatus(status: string) {\n        return api.put<APIResponseType>(`profile/status`, {\n            status: status\n        })\n            .then(res => res)\n    },\n    uploadPhoto(photo: File) {\n        const formData = new FormData();\n\n        formData.append('image', photo);\n\n        return api.put<APIResponseType<UpdatePhotoResponseDataType>>(`profile/photo`, formData, {\n            headers: {\n                'Content-Type': 'multipart/form-data'\n            }\n        })\n            .then(res => res.data)\n    },\n    saveProfile(profileData: ProfileType) {\n        return api.put<APIResponseType<ProfileType>>(`profile`, profileData)\n            .then(res => res.data)\n    }\n}","import {ResultCodesEnum} from \"../../api/api\"\nimport {PhotosType, PostType, ProfileType} from \"../../types/types\";\nimport {BaseThunkType, InferActionsTypes} from \"../redux-store\";\nimport {profileAPI} from \"../../api/ProfileAPI\";\n\n/**\n * INITIAL\n *\n * posts - [] - posts array\n * profile - [default: null] - Con be (null) or (object). If profile is pended then (object) else (null)\n * isFetching - [default: false] - Con be (false) or (true). If profile is fetching then (true) else (false)\n * profileStatus - [default: ''] - Con be (empty string) or (filled string). If profile status is pended then (profileStatus) else (empty string)\n */\nconst initial = {\n    posts: [\n        {\n            id: 1,\n            message: 'happy ny!',\n            likes: 3\n        }, {\n            id: 2,\n            message: 'it is my first post',\n            likes: 5\n        },\n    ] as Array<PostType>,\n    profile: null as ProfileType | null,\n    isFetching: false,\n    profileStatus: '',\n}\n\nexport const profileReducer = (state = initial, action: ActionTypes): InitialType => {\n    switch (action.type) {\n        case 'SOCIAL/PROFILE/ADD_POST': {\n            return {\n                ...state,\n                posts: [...state.posts, {\n                    id: 3,\n                    message: action.postText,\n                    likes: 0,\n                }],\n            };\n        }\n        case 'SOCIAL/PROFILE/SET_USER_PROFILE': {\n            return {\n                ...state,\n                profile: action.profile\n            };\n        }\n        case 'SOCIAL/PROFILE/DELETE_POST': {\n            return {\n                ...state,\n                posts: state.posts.filter(post => post.id !== action.id)\n            };\n        }\n        case 'SOCIAL/PROFILE/SET_IS_FETCHING': {\n            return {\n                ...state,\n                isFetching: action.isFetching\n            };\n        }\n        case 'SOCIAL/PROFILE/SET_PROFILE_STATUS': {\n            return {\n                ...state,\n                profileStatus: action.profileStatus\n            };\n        }\n        case 'SOCIAL/PROFILE/UPDATE_PHOTO_SUCCESS': {\n            return {\n                ...state,\n                profile: {\n                    ...state.profile,\n                    photos: action.photos\n                } as ProfileType\n            }\n        }\n        default: {\n            return state;\n        }\n    }\n}\n\nexport const actions = {\n    addPost: (postText: string) => ({\n        type: 'SOCIAL/PROFILE/ADD_POST',\n        postText: postText\n    } as const),\n    deletePost: (id: number) => ({\n        type: 'SOCIAL/PROFILE/DELETE_POST',\n        id: id\n    } as const),\n    setUserProfile: (profile: ProfileType) => ({\n        type: 'SOCIAL/PROFILE/SET_USER_PROFILE',\n        profile: profile\n    } as const),\n    setIsFetching: (isFetching: boolean) => ({\n        type: 'SOCIAL/PROFILE/SET_IS_FETCHING',\n        isFetching: isFetching\n    } as const),\n    setProfileStatus: (profileStatus: string) => ({\n        type: 'SOCIAL/PROFILE/SET_PROFILE_STATUS',\n        profileStatus: profileStatus\n    } as const),\n    updatePhotoSuccess: (photos: PhotosType) => ({\n        type: 'SOCIAL/PROFILE/UPDATE_PHOTO_SUCCESS',\n        photos: photos\n    } as const),\n}\n\nexport const getProfile = (userId: number): ThunkType => async (dispatch) => {\n    dispatch(actions.setIsFetching(true))\n\n    if (userId) {\n        const data = await profileAPI.getProfileAPI(userId);\n\n        dispatch(actions.setUserProfile(data))\n    } else {\n        throw new Error('userId can not be null')\n    }\n\n    dispatch(actions.setIsFetching(false))\n}\n\nexport const getProfileStatus = (userId: number): ThunkType => async (dispatch) => {\n    const profileStatus = await profileAPI.getProfileStatus(userId);\n\n    dispatch(actions.setProfileStatus(profileStatus))\n}\n\nexport const updateProfileStatus = (profileStatus: string): ThunkType => async (dispatch) => {\n    try {\n        const response = await profileAPI.updateProfileStatus(profileStatus);\n\n        if (response.data.resultCode === ResultCodesEnum.Success) {\n            dispatch(actions.setProfileStatus(profileStatus))\n        } else {\n            if (response.data.messages.length) {\n                alert(response.data.messages[0]);\n            }\n        }\n    } catch (error) {\n        alert(error.message)\n    }\n}\n\nexport const uploadPhoto = (photo: File): ThunkType => async (dispatch) => {\n    const data = await profileAPI.uploadPhoto(photo);\n\n    if (data.resultCode === ResultCodesEnum.Success) {\n        dispatch(actions.updatePhotoSuccess(data.data.photos))\n    } else {\n        if (data.messages.length) {\n            alert(data.messages[0]);\n        }\n    }\n}\n\nexport const saveProfileData = (profileData: ProfileType): ThunkType => async (dispatch, getState) => {\n    const userId = getState().auth.userId;\n    const data = await profileAPI.saveProfile(profileData);\n\n    if (data.resultCode === ResultCodesEnum.Success) {\n        if (userId) {\n            await dispatch(getProfile(userId));\n        } else {\n            throw new Error('userId can not be null')\n        }\n    } else {\n        if (data.messages?.length) {\n            alert(data.messages[0]);\n            await Promise.reject(data.messages[0]);\n        }\n    }\n}\n\ntype InitialType = typeof initial\n// type DispatchType = Dispatch<ActionTypes>\ntype ThunkType = BaseThunkType<ActionTypes>\ntype ActionTypes = InferActionsTypes<typeof actions>\n","import axios from \"axios\";\nimport {UserType} from \"../types/types\";\n\nexport const api = axios.create({\n    withCredentials: true,\n    headers: {\n        'API-KEY': '5a02e0ce-1492-47cd-b69a-6445510cc320',\n    },\n    baseURL: 'https://social-network.samuraijs.com/api/1.0/'\n})\n\nexport enum ResultCodesEnum {\n    Success = 0,\n    Error = 1,\n}\n\nexport enum ResultCodeForCaptchaEnum {\n    CaptchaIsRequired = 10,\n}\n\nexport type GetItemsType = {\n    items: Array<UserType>\n    totalCount: number\n    error: string | null\n}\n","import {DialogType, MessageType} from \"../../types/types\";\nimport {InferActionsTypes} from \"../redux-store\";\n\n/**\n * INITIAL\n *\n * dialogs - [default: [object]] - dialogs array\n * messages - [default: [object]] - messages array\n */\nconst initial = {\n    dialogs: [\n        {\n            id: 1,\n            name: 'Dima'\n        }, {\n            id: 2,\n            name: 'Andrew'\n        }\n    ] as Array<DialogType>,\n    messages: [\n        {\n            id: 1,\n            message: 'HI!'\n        }, {\n            id: 2,\n            message: 'YO!'\n        }, {\n            id: 3,\n            message: 'Vlad! Happy NY!!'\n        }, {\n            id: 4,\n            message: 'Hi, how r u?'\n        },\n    ] as Array<MessageType>,\n}\n\nexport const dialogsReducer = (state = initial, action: ActionTypes): InitialType => {\n    switch (action.type) {\n        case 'SOCIAL/DIALOGS/SEND_MESSAGE': {\n            return {\n                ...state,\n                messages: [...state.messages, {\n                    id: 5,\n                    message: action.messageText\n                }]\n            }\n        }\n        default: {\n            return state;\n        }\n    }\n}\n\ntype ActionTypes = InferActionsTypes<typeof actions>\n\nexport const actions = {\n    sendMessage: (messageText: string) => ({\n        type: 'SOCIAL/DIALOGS/SEND_MESSAGE',\n        messageText: messageText\n    } as const)\n}\n\n// type DispatchType = Dispatch<ActionTypes>\n// type ThunkType = BaseThunkType<ActionTypes>\ntype InitialType = typeof initial\n","export const updateObjectInArray = (items: Array<any>, itemId: number, objPropName: string, newObjProps: object) => {\n    return items.map(item => {\n        if (item[objPropName] === itemId) {\n            return {\n                ...item,\n                ...newObjProps\n            }\n        }\n\n        return item;\n    })\n}","import {api, GetItemsType} from \"./api\";\nimport {APIResponseType} from \"./AuthAPI\";\n\nexport const usersAPI = {\n    getUsers(pageSize = 5, pageNumber = 1, term: string = '', friend: null | boolean = null) {\n        return api.get<GetItemsType>(`users?count=${pageSize}&page=${pageNumber}&term=${term}` + (friend === null ? `` : `&friend=${friend}`))\n            .then(res => res.data)\n    },\n    follow(userId: number) {\n        return api.post<APIResponseType>(`follow/${userId}`)\n            .then(res => res.data)\n    },\n    unfollow(userId: number) {\n        return api.delete<APIResponseType>(`follow/${userId}`)\n            .then(res => res.data);  // as Promise<ResponseType>\n    }\n}","import {ResultCodesEnum} from \"../../api/api\";\nimport {updateObjectInArray} from \"../../utils/helpers/objectHelpers\";\nimport {UserType} from \"../../types/types\";\nimport {BaseThunkType, InferActionsTypes} from \"../redux-store\";\nimport {Dispatch} from \"redux\";\nimport {usersAPI} from \"../../api/UsersAPI\";\nimport {APIResponseType} from \"../../api/AuthAPI\";\n\n/**\n * INITIAL\n *\n * users - [default: []] - Can be (empty array) or (filled array). Array of users\n * pageSize - [default: 5] - Con be (number). Users count per page\n * totalUsersCount - [default: 0] - Con be (number). Total users count in db\n * currentPage - [default: 1] - Con be (number). Which page is showing\n * followingInProgress - [default: []] - Con be (empty array) or (filled array). This array includes users which need do following or unfollowing\n * isFetching - [default: false] - Con be (true) or (false). If users is pending then (true) else (false)\n */\nconst initial = {\n    users: [] as Array<UserType>,\n    pageSize: 5,\n    totalUsersCount: 0,\n    currentPage: 1,\n    isFetching: false,\n    followingInProgress: [] as Array<number>, // array of user ids\n    filter: {\n        term: '',\n        friend: null as null | boolean\n    }\n}\n\nexport const usersReducer = (state = initial, action: ActionTypes): InitialType => {\n    switch (action.type) {\n        case 'SOCIAL/USERS/FOLLOW': {\n            return {\n                ...state,\n                users: updateObjectInArray(state.users, action.userId, 'id', {followed: true})\n            }\n        }\n        case 'SOCIAL/USERS/UNFOLLOW': {\n            return {\n                ...state,\n                users: updateObjectInArray(state.users, action.userId, 'id', {followed: false})\n            }\n        }\n        case 'SOCIAL/USERS/SET_USERS': {\n            return {\n                ...state,\n                users: action.users\n            }\n        }\n        case 'SOCIAL/USERS/SET_TOTAL_USERS_COUNT': {\n            return {\n                ...state,\n                totalUsersCount: action.totalUsersCount\n            }\n        }\n        case 'SOCIAL/USERS/SET_CURRENT_PAGE': {\n            return {\n                ...state,\n                currentPage: action.currentPage\n            }\n        }\n        case 'SOCIAL/USERS/SET_IS_FETCHING': {\n            return {\n                ...state,\n                isFetching: action.isFetching\n            }\n        }\n        case 'SOCIAL/USERS/SET_FOLLOWING_IN_PROGRESS': {\n            return {\n                ...state,\n                followingInProgress: action.isFetching\n                    ? [...state.followingInProgress, action.userId]\n                    : state.followingInProgress.filter(id => id !== action.userId)\n            }\n        }\n        case 'SOCIAL/USERS/SET_FILTER': {\n            return {\n                ...state,\n                filter: action.payload\n            }\n        }\n        default: {\n            return state;\n        }\n    }\n}\n\nexport const actions = {\n    followSuccess: (userId: number) => ({\n        type: 'SOCIAL/USERS/FOLLOW',\n        userId: userId\n    } as const),\n    unfollowSuccess: (userId: number) => ({\n        type: 'SOCIAL/USERS/UNFOLLOW',\n        userId: userId\n    } as const),\n    setUsers: (users: Array<UserType>) => ({\n        type: 'SOCIAL/USERS/SET_USERS',\n        users: users\n    } as const),\n    setTotalUsersCount: (totalUsersCount: number) => ({\n        type: 'SOCIAL/USERS/SET_TOTAL_USERS_COUNT',\n        totalUsersCount: totalUsersCount\n    } as const),\n    setCurrentPage: (currentPage: number) => ({\n        type: 'SOCIAL/USERS/SET_CURRENT_PAGE',\n        currentPage: currentPage\n    } as const),\n    setIsFetching: (isFetching: boolean) => ({\n        type: 'SOCIAL/USERS/SET_IS_FETCHING',\n        isFetching: isFetching\n    } as const),\n    setFollowingInProgress: (isFetching: boolean, userId: number) => ({\n        type: 'SOCIAL/USERS/SET_FOLLOWING_IN_PROGRESS',\n        isFetching: isFetching,\n        userId: userId\n    } as const),\n    setFilter: (filter: FilterType) => ({\n        type: 'SOCIAL/USERS/SET_FILTER',\n        payload: filter,\n    } as const),\n}\n\nconst _followUnfollowFlow = async (\n    dispatch: DispatchType,\n    userId: number,\n    apiMethod: (userId: number) => Promise<APIResponseType>,\n    actionCreator: (userId: number) => ActionTypes\n) => {\n    const data = await apiMethod(userId)\n\n    dispatch(actions.setFollowingInProgress(true, userId));\n\n\n    if (data.resultCode === ResultCodesEnum.Success) {\n        dispatch(actionCreator(userId))\n    }\n\n    dispatch(actions.setFollowingInProgress(false, userId))\n}\n\nexport const getUsersList = (pageSize: number, page: number, filter: FilterType): ThunkType => async (dispatch) => {\n    dispatch(actions.setIsFetching(true))\n    dispatch(actions.setFilter(filter))\n    dispatch(actions.setCurrentPage(page))\n\n    const data = await usersAPI.getUsers(pageSize, page, filter.term, filter.friend)\n\n    dispatch(actions.setUsers(data.items))\n    dispatch(actions.setTotalUsersCount(data.totalCount))\n    dispatch(actions.setIsFetching(false))\n}\n\nexport const follow = (userId: number): ThunkType => async (dispatch) => {\n    await _followUnfollowFlow(dispatch, userId, usersAPI.follow, actions.followSuccess);\n}\n\nexport const unfollow = (userId: number): ThunkType => async (dispatch) => {\n    await _followUnfollowFlow(dispatch, userId, usersAPI.unfollow, actions.unfollowSuccess);\n}\n\ntype DispatchType = Dispatch<ActionTypes>\ntype ThunkType = BaseThunkType<ActionTypes>\ntype ActionTypes = InferActionsTypes<typeof actions>\nexport type InitialType = typeof initial\nexport type FilterType = typeof initial.filter\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"loader\":\"Preloader_loader__wv7rF\",\"spin\":\"Preloader_spin__1PEvw\"};","import {LoginFormDataType} from \"../../../types/types\";\nimport React from \"react\";\nimport {Field, Form} from \"react-final-form\";\nimport {Input} from \"../../common/FormsControls/FormsControls\";\nimport {composeValidators, maxLength, required} from \"../../../utils/validators/validators\";\n\ntype Props = {\n    onSubmit: (formData: LoginFormDataType) => void\n    captchaUrl: string | null\n}\n\nenum LoginFormFields {\n    email = 'email',\n    password = 'password',\n    rememberMe = 'rememberMe',\n    captcha = 'captcha'\n}\n\nconst LoginForm: React.FC<Props> = ({onSubmit, captchaUrl}) => {\n    return (\n        <Form onSubmit={onSubmit}>\n            {(props) => {\n                return (\n                    <form onSubmit={props.handleSubmit} name={'LoginForm'}>\n                        <div>\n                            <Field\n                                name={LoginFormFields.email}\n                                placeholder={'Email'}\n                                component={Input}\n                                validate={composeValidators(required, maxLength(50))}\n                            />\n                        </div>\n                        <div>\n                            <Field\n                                name={LoginFormFields.password}\n                                placeholder={'Password'}\n                                type={'password'}\n                                component={Input}\n                                validate={composeValidators(required, maxLength(50))}\n                            />\n                        </div>\n                        <div>\n                            <Field name={LoginFormFields.rememberMe} type={'checkbox'} component={Input}/> remember me\n                        </div>\n                        {captchaUrl &&\n                        <div>\n                            <img src={captchaUrl} alt=\"captcha\"/>\n                            <div>\n                                <Field name={LoginFormFields.captcha} type={'text'} component={'input'}/>\n                            </div>\n                        </div>\n                        }\n                        <div>\n                            <button>Login</button>\n                        </div>\n                    </form>\n                )\n            }}\n        </Form>\n    )\n}\n\nexport default LoginForm","import React from 'react';\nimport classes from './Navbar.module.css';\nimport {NavLink} from \"react-router-dom\";\n\nconst Navbar = () => {\n    const links = [\n        {\n            to: '/profile',\n            name: 'Profile'\n        }, {\n            to: '/dialogs',\n            name: 'Dialogs'\n        }, {\n            to: '/users',\n            name: 'Users'\n        }, {\n            to: '/settings',\n            name: 'Settings'\n        }\n    ]\n\n    return (\n        <nav className={classes.nav}>\n            {links.map(link => {\n                return (\n                    <div className={classes.item} key={link.to}>\n                        <NavLink to={link.to} activeClassName={classes.active}>\n                            {link.name}\n                        </NavLink>\n                    </div>\n                )\n            })}\n        </nav>\n    );\n}\n\nexport default Navbar;\n","import React from 'react';\n\nconst News = () => {\n    return (\n        <div>\n            news\n        </div>\n    )\n}\n\nexport default News;","import React from 'react';\n\nconst Music = () => {\n    return (\n        <div>\n            music\n        </div>\n    )\n}\n\nexport default Music;","import React from 'react';\n\nconst Settings = () => {\n    return (\n        <div>\n            settings\n        </div>\n    )\n}\n\nexport default Settings;","export default __webpack_public_path__ + \"static/media/Ava.33982d13.jpg\";","import React from 'react';\nimport classes from './Header.module.css';\nimport ava from '../../media/Ava.jpg';\nimport {NavLink} from \"react-router-dom\";\n\ntype Props = {\n    isAuth: boolean\n    login: string | null\n    logout: () => void\n}\n\nconst Header: React.FC<Props> = ({isAuth, login, logout}) => {\n    return (\n        <div className={classes.header}>\n            <img className={classes.logo} src={ava} alt={'logo'}/>\n            <div className={classes.loginBlock}>\n                {isAuth\n                    ? <div>{login}\n                        <button onClick={logout}>Logout</button>\n                    </div>\n                    : <NavLink to={'/login'}>\n                        Login\n                    </NavLink>\n                }\n            </div>\n        </div>\n    );\n}\n\nexport default Header;\n","import {api} from \"./api\";\n\ntype GetCaptchaUrlResponseType = {\n    url: string\n}\n\nexport const securityAPI = {\n    getCaptchaUrl() {\n        return api.get<GetCaptchaUrlResponseType>(`security/get-captcha-url`)\n            .then(res => res)\n    }\n}","import {LoginFormDataType} from \"../types/types\";\nimport {api, ResultCodeForCaptchaEnum, ResultCodesEnum} from \"./api\";\n\nexport type APIResponseType<D = {}, RC = ResultCodesEnum> = {\n    data: D,\n    messages: Array<string>\n    resultCode: RC\n}\n\ntype MeResponseDataType = {\n    id: number\n    email: string\n    login: string\n}\n\ntype LoginResponseDataType = {\n    userId: number\n}\n\nexport const authAPI = {\n    me() {\n        return api.get<APIResponseType<MeResponseDataType>>(`auth/me`)\n            .then(res => res.data);\n    },\n    login(formData: LoginFormDataType) {\n        return api.post<APIResponseType<LoginResponseDataType, ResultCodesEnum | ResultCodeForCaptchaEnum>>(`auth/login`, formData)\n            .then(res => res.data);\n    },\n    logout() {\n        return api.delete(`auth/login`)\n            .then(res => res.data);\n    }\n}","import {ResultCodeForCaptchaEnum, ResultCodesEnum} from \"../../api/api\"\nimport {LoginFormDataType} from \"../../types/types\";\nimport {BaseThunkType, InferActionsTypes} from \"../redux-store\";\nimport {securityAPI} from \"../../api/SecurityAPI\";\nimport {authAPI} from \"../../api/AuthAPI\";\n\ntype InitialType = typeof initial\n\n/**\n * INITIAL\n *\n * isAuth - [default: false] - Can be (true) or (false). If user is not authorized then (false) else (true)\n * captchaUrl - [default: null] - Con be (null) or (string). If captcha is not required then (null) else (string)\n * login - [default: null] - Con be (null) or (string). If user is not authorized then (null) else (string)\n * userId - [default: null] - Con be (null) or (string). If user is not authorized then (null) else (string)\n * email - [default: null] - Con be (null) or (string). If user is not authorized then (null) else (string)\n */\nconst initial = {\n    userId: null as number | null,\n    email: null as string | null,\n    login: null as string | null,\n    isAuth: false,\n    captchaUrl: null as string | null\n}\n\n/**\n * AUTH REDUCER\n *\n * Reducer takes a current (state) from store and (action) which action creator send him\n *\n * state - [default: initial] - Includes current state\n * action - [] - Includes action (type) and data\n *\n * return new State copy\n */\nexport const authReducer = (state = initial, action: ActionTypes): InitialType => {\n    switch (action.type) {\n        case 'SOCIAL/AUTH/SET_AUTH_USER_DATA': {\n            return {\n                ...state,\n                ...action.payload,\n            }\n        }\n        case 'SOCIAL/AUTH/GET_CAPTCHA_URL_SUCCESS': {\n            return {\n                ...state,\n                captchaUrl: action.captchaUrl\n            }\n        }\n        default: {\n            return state;\n        }\n    }\n}\n\nexport const actions = {\n    setAuthUserData: (userId: number | null, email: string | null, login: string | null, isAuth: boolean) => ({\n        type: 'SOCIAL/AUTH/SET_AUTH_USER_DATA',\n        payload: {userId, email, login, isAuth},\n    } as const),\n    getCaptchaUrlSuccess: (captchaUrl: string | null) => ({\n        type: 'SOCIAL/AUTH/GET_CAPTCHA_URL_SUCCESS',\n        captchaUrl: captchaUrl\n    } as const),\n}\n\nexport const me = (): ThunkType => async (dispatch) => {\n    const data = await authAPI.me();\n\n    if (data.resultCode === ResultCodesEnum.Success) {\n        const {id, email, login} = data.data;\n\n        dispatch(actions.setAuthUserData(id, email, login, true))\n    }\n}\n\nexport const login = (formData: LoginFormDataType): ThunkType => async (dispatch) => {\n    const data = await authAPI.login(formData);\n\n    if (data.resultCode === ResultCodesEnum.Success) {\n        dispatch(me());\n        dispatch(actions.getCaptchaUrlSuccess(null));\n    } else {\n        if (data.resultCode === ResultCodeForCaptchaEnum.CaptchaIsRequired) {\n            dispatch(getCaptcha());\n        }\n\n        if (data.messages?.length) {\n            alert(data.messages[0]);\n        }\n    }\n}\n\nexport const getCaptcha = (): ThunkType => async (dispatch) => {\n    const response = await securityAPI.getCaptchaUrl();\n    const captchaUrl = response.data.url;\n\n    dispatch(actions.getCaptchaUrlSuccess(captchaUrl))\n}\n\n// если ограничиваем только нашими actions, то тогда ThunkType, иначе - BaseThunk\nexport const logout = (): ThunkType => async (dispatch) => {\n    const data = await authAPI.logout();\n\n    if (data.resultCode === ResultCodesEnum.Success) {\n        dispatch(actions.setAuthUserData(null, null, null, false));\n    } else {\n        if (data.messages?.length) {\n            alert(data.messages[0]);\n        }\n    }\n}\n\n// type DispatchType = Dispatch<ActionTypes>\ntype ThunkType = BaseThunkType<ActionTypes> // | FormAction> from redux-forms. Если ограничиваем только нашими actions\ntype ActionTypes = InferActionsTypes<typeof actions>\n","import React from 'react';\nimport Header from \"./Header\";\nimport {connect} from \"react-redux\";\nimport {logout} from \"../../Redux/reducers/authReducer\";\nimport {getIsAuthSelector, getLoginSelector} from \"../../Redux/selectors/authSelectors\";\nimport {AppStateType} from \"../../Redux/redux-store\";\n\ntype StateToProps = {\n    isAuth: boolean\n    login: string | null\n}\n\ntype DispatchToProps = {\n    logout: () => void\n}\n\ntype Props = StateToProps & DispatchToProps\n\nclass HeaderContainer extends React.Component<Props> {\n    render() {\n        const {logout, login, isAuth} = this.props;\n        return (\n            <Header\n                logout={logout}\n                isAuth={isAuth}\n                login={login}\n            />\n        );\n    }\n}\n\nconst mapStateToProps = (state: AppStateType): StateToProps => {\n    return {\n        isAuth: getIsAuthSelector(state),\n        login: getLoginSelector(state),\n    }\n}\n\n\nexport default connect<StateToProps, DispatchToProps, {}, AppStateType>(mapStateToProps, {\n    logout\n})(HeaderContainer);\n","import React from 'react';\nimport {connect} from \"react-redux\";\nimport {login} from \"../../Redux/reducers/authReducer\";\nimport {Redirect} from \"react-router-dom\";\nimport {getIsAuthSelector} from \"../../Redux/selectors/authSelectors\";\nimport {AppStateType} from \"../../Redux/redux-store\";\nimport {LoginFormDataType} from \"../../types/types\";\nimport LoginForm from \"./LoginForm/LoginForm\";\n\ntype StateToProps = {\n    isAuth: boolean\n    captchaUrl: string | null\n}\n\ntype DispatchToProps = {\n    login: (formData: LoginFormDataType) => void\n}\n\ntype Props = StateToProps & DispatchToProps\n\nconst Login: React.FC<Props> = ({login, isAuth, captchaUrl}) => {\n    const onSubmit = (formData: LoginFormDataType) => {\n        login(formData)\n    }\n\n    if (isAuth) {\n        return <Redirect to={'/profile'}/>\n    }\n\n    return (\n        <div>\n            <h1>LOGIN</h1>\n            <LoginForm onSubmit={onSubmit} captchaUrl={captchaUrl}/>\n        </div>\n    )\n}\n\nconst mapStateToProps = (state: AppStateType): StateToProps => {\n    return {\n        isAuth: getIsAuthSelector(state),\n        captchaUrl: state.auth.captchaUrl\n    }\n}\n\nexport default connect<StateToProps, DispatchToProps, {}, AppStateType>(\n    mapStateToProps, {\n        login\n    }\n)(Login);","import {me} from \"./authReducer\"\nimport {InferActionsTypes} from \"../redux-store\"\n\n/**\n * Type of initial state for AppReducer\n */\ntype InitialStateType = typeof initial\n\n/**\n * INITIAL\n *\n * initialized - [default: false] - Con be (false) or (true). If app is initialised then (true) else (false)\n */\nconst initial = {\n    initialized: false,\n}\n\nexport const appReducer = (state = initial, action: ActionTypes): InitialStateType => {\n    switch (action.type) {\n        case 'SOCIAL/APP/INITIALIZED_SUCCESS': {\n            return {\n                ...state,\n                initialized: true\n            }\n        }\n        default: {\n            return state;\n        }\n    }\n}\n\n// type DispatchType = Dispatch<ActionTypes>\n// type ThunkType = BaseThunkType<ActionTypes>\n\ntype ActionTypes = InferActionsTypes<typeof actions>\n\n/**\n * const func = (): InitializedSuccessActionType => {} значит, что фукнция возвращает объект типа InitializedSuccessActionType\n */\n\nexport const actions = {\n    initializedSuccess: () => ({\n        type: 'SOCIAL/APP/INITIALIZED_SUCCESS',\n    } as const)\n}\n\nexport const initializeApp = () => (dispatch: any) => {\n    const promise = dispatch(me());\n\n    Promise.all([promise])\n        .then(() => {\n            dispatch(actions.initializedSuccess());\n        })\n}","import {Action, applyMiddleware, combineReducers, compose, createStore} from \"redux\"\nimport {profileReducer} from \"./reducers/profileReducer\"\nimport {dialogsReducer} from \"./reducers/dialogsReducer\"\nimport {usersReducer} from \"./reducers/usersReducer\"\nimport {authReducer} from \"./reducers/authReducer\"\nimport thunk, {ThunkAction} from 'redux-thunk'\nimport {appReducer} from \"./reducers/appReducer\"\n\nconst rootReducer = combineReducers({\n    profilePage: profileReducer,\n    dialogsPage: dialogsReducer,\n    usersPage: usersReducer,\n    auth: authReducer,\n    app: appReducer\n})\n\ntype RootReducerType = typeof rootReducer\nexport type AppStateType = ReturnType<RootReducerType>\n\nexport type InferActionsTypes<T> = T extends { [key: string]: (...args: any[]) => infer U } ? U : never\nexport type BaseThunkType<A extends Action, R = Promise<void>> = ThunkAction<R, AppStateType, unknown, A>\n\n// @ts-ignore\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose\n\nconst store = createStore(rootReducer, composeEnhancers(\n    applyMiddleware(thunk)\n))\n\nexport default store","import React from 'react';\n\nexport function withSuspense<WCP>(WrappedComponent: React.ComponentType<WCP>) {\n    const loading = <div>Loading...</div>;\n\n    return (props: WCP) => {\n        return (\n            <React.Suspense fallback={loading}>\n                <WrappedComponent {...props}/>\n            </React.Suspense>\n        )\n    }\n}\n","import React from 'react'\nimport './App.css'\nimport Navbar from \"./components/Navbar/Navbar\"\nimport News from \"./components/News/News\"\nimport Music from \"./components/Music/Music\"\nimport Settings from \"./components/Settings/Settings\"\nimport HeaderContainer from \"./components/Header/HeaderContainer\"\nimport Login from \"./components/Login/Login\"\nimport {connect, Provider} from \"react-redux\"\nimport {compose} from \"redux\"\nimport {HashRouter, Redirect, Route, Switch, withRouter} from \"react-router-dom\"\nimport {initializeApp} from \"./Redux/reducers/appReducer\"\nimport Preloader from \"./components/common/Preloader/Preloader\"\nimport store, {AppStateType} from \"./Redux/redux-store\"\nimport {withSuspense} from \"./hoc/withSuspense\"\n\nconst DialogsContainer = React.lazy(() => import (\"./components/Dialogs/DialogsContainer\"))\nconst ProfileContainer = React.lazy(() => import (\"./components/Profile/ProfileContainer\"))\nconst UsersContainer = React.lazy(() => import (\"./components/Users/UsersContainer\"))\n\nconst SuspendedDialogsContainer = withSuspense(DialogsContainer)\nconst SuspendedProfileContainer = withSuspense(ProfileContainer)\nconst SuspendedUsersContainer = withSuspense(UsersContainer)\n\ntype Props = {\n    initializeApp: () => void\n    initialized: boolean\n}\n\nclass App extends React.Component<Props> {\n    componentDidMount() {\n        const {initializeApp} = this.props\n\n        initializeApp();\n    }\n\n    render() {\n        const {initialized} = this.props;\n\n        if (!initialized) {\n            return <Preloader/>\n        }\n\n        return (\n            <div className={'app-wrapper'}>\n                <HeaderContainer/>\n                <Navbar/>\n                <div className={'app-wrapper-content'}>\n                    <Switch>\n                        <Route render={() => <SuspendedDialogsContainer/>} path={'/dialogs'}/>\n                        <Route render={() => <SuspendedProfileContainer/>} path={'/profile/:userId?'}/>\n                        <Route render={() => <SuspendedUsersContainer/>} path={'/users'}/>\n                        <Route render={() => <News/>} path={'/news'}/>\n                        <Route render={() => <Music/>} path={'/music'}/>\n                        <Route render={() => <Settings/>} path={'/settings'}/>\n                        <Route render={() => <Login/>} path={'/login'}/>\n                        <Redirect exact from=\"/\" to=\"/profile\"/>\n                    </Switch>\n                </div>\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = (state: AppStateType) => {\n    return {\n        initialized: state.app.initialized,\n    }\n}\n\nconst AppContainer = compose<React.ComponentType>(\n    withRouter,\n    connect(mapStateToProps, {initializeApp})\n)(App);\n\nconst SocialApp: React.FC = () => {\n    return (\n        <React.StrictMode>\n            <HashRouter>\n                <Provider store={store}>\n                    <AppContainer/>\n                </Provider>\n            </HashRouter>\n        </React.StrictMode>\n    )\n}\n\nexport default SocialApp;","import './index.css';\nimport ReactDOM from \"react-dom\";\nimport React from 'react';\nimport SocialApp from \"./App\";\n\nReactDOM.render(<SocialApp/>, document.getElementById('root'));"],"sourceRoot":""}