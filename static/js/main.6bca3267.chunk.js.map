{"version":3,"sources":["media/user.png","Redux/selectors/profileSelectors.ts","api/ProfileAPI.ts","Redux/reducers/profileReducer.ts","Redux/reducers/dialogsReducer.ts","api/api.ts","components/Login/LoginForm/LoginForm.tsx","components/Navbar/Navbar.tsx","components/News/News.tsx","components/Music/Music.tsx","components/Settings/Settings.tsx","api/SecurityAPI.ts","api/AuthAPI.ts","Redux/reducers/authReducer.ts","components/Login/Login.tsx","Redux/reducers/appReducer.ts","utils/helpers/objectHelpers.ts","api/UsersAPI.ts","Redux/reducers/usersReducer.ts","Redux/redux-store.ts","hoc/withSuspense.tsx","components/Users/UsersSearchForm.tsx","Redux/selectors/usersSelectors.ts","components/Users/User/User.tsx","components/common/Paginator/Paginator.tsx","components/Users/Users.tsx","components/Users/UsersPage.tsx","components/Header/Header.tsx","components/Footer/Footer.tsx","components/pages/Chat/ChatPage.tsx","App.tsx","index.tsx","Redux/selectors/authSelectors.ts","components/common/Preloader/Preloader.tsx"],"names":["selectProfile","state","profilePage","profile","selectProfileStatus","profileStatus","selectPosts","posts","selectUserAvatar","photos","profileAPI","userId","api","get","then","res","data","status","put","photo","formData","FormData","append","headers","profileData","initial","id","message","likes","isFetching","profileReducer","action","type","postText","filter","post","actions","addPost","deletePost","setUserProfile","setIsFetching","setProfileStatus","updatePhotoSuccess","getProfile","dispatch","a","Error","getProfileStatus","updateProfileStatus","response","resultCode","ResultCodesEnum","Success","messages","length","alert","uploadPhoto","saveProfileData","getState","auth","Promise","reject","dialogs","name","dialogsReducer","messageText","sendMessage","ResultCodeForCaptchaEnum","axios","create","withCredentials","baseURL","LoginFormFields","Navbar","props","Sider","Layout","currentMenuKey","useHistory","location","pathname","links","to","icon","UserOutlined","TeamOutlined","offsetTop","className","width","mode","defaultSelectedKeys","style","height","map","link","Item","News","Music","Settings","securityAPI","authAPI","delete","email","login","isAuth","captchaUrl","payload","me","getCaptcha","url","LoginForm","React","memo","initialValuesOfForm","password","rememberMe","onSubmit","setSubmitting","initialValues","isSubmitting","component","placeholder","src","alt","captcha","disabled","LoginPage","useSelector","selectCaptchaUrl","selectIsAuth","useDispatch","CaptchaIsRequired","initialized","updateObjectInArray","items","itemId","objPropName","newObjProps","item","usersAPI","pageSize","pageNumber","term","friend","users","totalUsersCount","currentPage","followingInProgress","_followUnfollowFlow","apiMethod","actionCreator","getUsersList","page","totalCount","rootReducer","combineReducers","dialogsPage","usersPage","followed","app","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunk","withSuspense","WrappedComponent","loading","Suspense","fallback","FieldsEnum","getPageSizeSelector","getTotalUsersCountSelector","getCurrentPageSelector","getUsersIsFetchingSelector","getFollowingInProgressSelector","getUsersFilterSelector","getUsersSelector","createSelector","u","User","unfollow","follow","user","small","undefinedAva","maxWidth","onClick","some","followButton","UsersSearchForm","onFilterChanged","JSON","stringify","enableReinitialize","values","parse","as","value","Paginator","totalItemsCount","changePage","portionSize","styles","paginator","margin","padding","border","selectedPage","fontWeight","borderColor","pageCount","Math","ceil","pages","i","push","portionCount","useState","portionNumber","setPortionNumber","leftPositionPageNumber","rightPortionPageNumber","Users","history","unfollowUser","followUser","useEffect","parsedQs","qs","search","substr","actualPage","actualFilter","queryParams","UsersPage","Preloader","Header","Text","Typography","selectLogin","avatar","span","code","color","fontSize","shape","LogoutOutlined","size","Footer","offsetBottom","textAlign","href","target","rel","ws","WebSocket","ChatPage","setMessages","addEventListener","e","prevMessages","Messages","overflow","m","Message","random","userName","SendMessageForm","setMessage","onChange","currentTarget","send","DialogsContainer","lazy","ProfileContainer","SuspendedDialogsContainer","SuspendedProfileContainer","Content","App","initializeApp","this","minHeight","render","path","exact","from","Component","AppContainer","withRouter","connect","promise","all","SocialApp","ReactDOM","document","getElementById","selectUserId","spinning"],"mappings":"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","file":"static/js/main.6bca3267.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/user.8d49e377.png\";","import {AppStateType} from \"../redux-store\";\r\n\r\nexport const selectProfile = (state: AppStateType) => {\r\n    return state.profilePage.profile;\r\n}\r\n\r\nexport const selectProfileStatus = (state: AppStateType) => {\r\n    return state.profilePage.profileStatus;\r\n}\r\n\r\nexport const selectPosts = (state: AppStateType) => {\r\n    return state.profilePage.posts;\r\n}\r\n\r\nexport const selectUserAvatar = (state: AppStateType) => {\r\n    return state.profilePage.profile?.photos;\r\n}","import {EditProfileDataForm, PhotosType, ProfileType} from \"../types/types\";\r\nimport {api} from \"./api\";\r\nimport {APIResponseType} from \"./AuthAPI\";\r\n\r\ntype UpdatePhotoResponseDataType = {\r\n    photos: PhotosType\r\n}\r\n\r\nexport const profileAPI = {\r\n    getProfileAPI(userId: number) {\r\n        return api.get<ProfileType>(`profile/${userId}`)\r\n            .then(res => res.data)\r\n    },\r\n    getProfileStatus(userId: number) {\r\n        return api.get<string>(`profile/status/${userId}`).then(res => res.data)\r\n    },\r\n    updateProfileStatus(status: string) {\r\n        return api.put<APIResponseType>(`profile/status`, {\r\n            status: status\r\n        })\r\n            .then(res => res)\r\n    },\r\n    uploadPhoto(photo: File) {\r\n        const formData = new FormData();\r\n\r\n        formData.append('image', photo);\r\n\r\n        return api.put<APIResponseType<UpdatePhotoResponseDataType>>(`profile/photo`, formData, {\r\n            headers: {\r\n                'Content-Type': 'multipart/form-data'\r\n            }\r\n        })\r\n            .then(res => res.data)\r\n    },\r\n    saveProfile(profileData: EditProfileDataForm) {\r\n        return api.put<APIResponseType<ProfileType>>(`profile`, profileData)\r\n            .then(res => res.data)\r\n    }\r\n}","import {ResultCodesEnum} from \"../../api/api\"\r\nimport {AddPostFormDataType, EditProfileDataForm, PhotosType, PostType, ProfileType} from \"../../types/types\";\r\nimport {BaseThunkType, InferActionsTypes} from \"../redux-store\";\r\nimport {profileAPI} from \"../../api/ProfileAPI\";\r\n\r\n/**\r\n * INITIAL\r\n *\r\n * posts - [] - posts array\r\n * profile - [default: null] - Con be (null) or (object). If profile is pended then (object) else (null)\r\n * isFetching - [default: false] - Con be (false) or (true). If profile is fetching then (true) else (false)\r\n * profileStatus - [default: ''] - Con be (empty string) or (filled string). If profile status is pended then (profileStatus) else (empty string)\r\n */\r\nconst initial = {\r\n    posts: [\r\n        {\r\n            id: 1,\r\n            message: 'happy ny!',\r\n            likes: 3\r\n        }, {\r\n            id: 2,\r\n            message: 'it is my first post',\r\n            likes: 5\r\n        },\r\n    ] as Array<PostType>,\r\n    profile: null as ProfileType | null,\r\n    isFetching: false,\r\n    profileStatus: '',\r\n}\r\n\r\nexport const profileReducer = (state = initial, action: ActionTypes): InitialType => {\r\n    switch (action.type) {\r\n        case 'SOCIAL/PROFILE/ADD_POST': {\r\n            return {\r\n                ...state,\r\n                posts: [...state.posts, {\r\n                    id: 3,\r\n                    message: action.postText,\r\n                    likes: 0,\r\n                }],\r\n            };\r\n        }\r\n        case 'SOCIAL/PROFILE/SET_USER_PROFILE': {\r\n            return {\r\n                ...state,\r\n                profile: action.profile\r\n            };\r\n        }\r\n        case 'SOCIAL/PROFILE/DELETE_POST': {\r\n            return {\r\n                ...state,\r\n                posts: state.posts.filter(post => post.id !== action.id)\r\n            };\r\n        }\r\n        case 'SOCIAL/PROFILE/SET_IS_FETCHING': {\r\n            return {\r\n                ...state,\r\n                isFetching: action.isFetching\r\n            };\r\n        }\r\n        case 'SOCIAL/PROFILE/SET_PROFILE_STATUS': {\r\n            return {\r\n                ...state,\r\n                profileStatus: action.profileStatus\r\n            };\r\n        }\r\n        case 'SOCIAL/PROFILE/UPDATE_PHOTO_SUCCESS': {\r\n            return {\r\n                ...state,\r\n                profile: {\r\n                    ...state.profile,\r\n                    photos: action.photos\r\n                } as ProfileType\r\n            }\r\n        }\r\n        default: {\r\n            return state;\r\n        }\r\n    }\r\n}\r\n\r\nexport const actions = {\r\n    addPost: (formData: AddPostFormDataType) => ({\r\n        type: 'SOCIAL/PROFILE/ADD_POST',\r\n        postText: formData.postText\r\n    } as const),\r\n    deletePost: (id: number) => ({\r\n        type: 'SOCIAL/PROFILE/DELETE_POST',\r\n        id: id\r\n    } as const),\r\n    setUserProfile: (profile: ProfileType) => ({\r\n        type: 'SOCIAL/PROFILE/SET_USER_PROFILE',\r\n        profile: profile\r\n    } as const),\r\n    setIsFetching: (isFetching: boolean) => ({\r\n        type: 'SOCIAL/PROFILE/SET_IS_FETCHING',\r\n        isFetching: isFetching\r\n    } as const),\r\n    setProfileStatus: (profileStatus: string) => ({\r\n        type: 'SOCIAL/PROFILE/SET_PROFILE_STATUS',\r\n        profileStatus: profileStatus\r\n    } as const),\r\n    updatePhotoSuccess: (photos: PhotosType) => ({\r\n        type: 'SOCIAL/PROFILE/UPDATE_PHOTO_SUCCESS',\r\n        photos: photos\r\n    } as const),\r\n}\r\n\r\nexport const getProfile = (userId: number): ThunkType => async (dispatch) => {\r\n    dispatch(actions.setIsFetching(true))\r\n\r\n    if (userId) {\r\n        const data = await profileAPI.getProfileAPI(userId);\r\n\r\n        dispatch(actions.setUserProfile(data))\r\n    } else {\r\n        throw new Error('userId can not be null')\r\n    }\r\n\r\n    dispatch(actions.setIsFetching(false))\r\n}\r\n\r\nexport const getProfileStatus = (userId: number): ThunkType => async (dispatch) => {\r\n    const profileStatus = await profileAPI.getProfileStatus(userId);\r\n\r\n    dispatch(actions.setProfileStatus(profileStatus))\r\n}\r\n\r\nexport const updateProfileStatus = (profileStatus: string): ThunkType => async (dispatch) => {\r\n    try {\r\n        const response = await profileAPI.updateProfileStatus(profileStatus);\r\n\r\n        if (response.data.resultCode === ResultCodesEnum.Success) {\r\n            dispatch(actions.setProfileStatus(profileStatus))\r\n        } else {\r\n            if (response.data.messages.length) {\r\n                alert(response.data.messages[0]);\r\n            }\r\n        }\r\n    } catch (error) {\r\n        alert(error.message)\r\n    }\r\n}\r\n\r\nexport const uploadPhoto = (photo: File): ThunkType => async (dispatch) => {\r\n    const data = await profileAPI.uploadPhoto(photo);\r\n\r\n    if (data.resultCode === ResultCodesEnum.Success) {\r\n        dispatch(actions.updatePhotoSuccess(data.data.photos))\r\n    } else {\r\n        if (data.messages.length) {\r\n            alert(data.messages[0]);\r\n        }\r\n    }\r\n}\r\n\r\nexport const saveProfileData = (formData: EditProfileDataForm): ThunkType => async (dispatch, getState) => {\r\n    const userId = getState().auth.userId;\r\n    const data = await profileAPI.saveProfile(formData);\r\n\r\n    if (data.resultCode === ResultCodesEnum.Success) {\r\n        if (userId) {\r\n            await dispatch(getProfile(userId));\r\n        } else {\r\n            throw new Error('userId can not be null')\r\n        }\r\n    } else {\r\n        if (data.messages?.length) {\r\n            alert(data.messages[0]);\r\n            await Promise.reject(data.messages[0]);\r\n        }\r\n    }\r\n}\r\n\r\ntype InitialType = typeof initial\r\n// type DispatchType = Dispatch<ActionTypes>\r\ntype ThunkType = BaseThunkType<ActionTypes>\r\ntype ActionTypes = InferActionsTypes<typeof actions>\r\n","import {DialogType, MessageType, SendMessageFormDataType} from \"../../types/types\";\r\nimport {InferActionsTypes} from \"../redux-store\";\r\n\r\n/**\r\n * INITIAL\r\n *\r\n * dialogs - [default: [object]] - dialogs array\r\n * messages - [default: [object]] - messages array\r\n */\r\nconst initial = {\r\n    dialogs: [\r\n        {\r\n            id: 1,\r\n            name: 'Dima'\r\n        }, {\r\n            id: 2,\r\n            name: 'Andrew'\r\n        }\r\n    ] as Array<DialogType>,\r\n    messages: [\r\n        {\r\n            id: 1,\r\n            message: 'HI!'\r\n        }, {\r\n            id: 2,\r\n            message: 'YO!'\r\n        }, {\r\n            id: 3,\r\n            message: 'Vlad! Happy NY!!'\r\n        }, {\r\n            id: 4,\r\n            message: 'Hi, how r u?'\r\n        },\r\n    ] as Array<MessageType>,\r\n}\r\n\r\nexport const dialogsReducer = (state = initial, action: ActionTypes): InitialType => {\r\n    switch (action.type) {\r\n        case 'SOCIAL/DIALOGS/SEND_MESSAGE': {\r\n            return {\r\n                ...state,\r\n                messages: [...state.messages, {\r\n                    id: 5,\r\n                    message: action.messageText\r\n                }]\r\n            }\r\n        }\r\n        default: {\r\n            return state;\r\n        }\r\n    }\r\n}\r\n\r\ntype ActionTypes = InferActionsTypes<typeof actions>\r\n\r\nexport const actions = {\r\n    sendMessage: (formData: SendMessageFormDataType) => ({\r\n        type: 'SOCIAL/DIALOGS/SEND_MESSAGE',\r\n        messageText: formData.messageText\r\n    } as const)\r\n}\r\n\r\n// type DispatchType = Dispatch<ActionTypes>\r\n// type ThunkType = BaseThunkType<ActionTypes>\r\ntype InitialType = typeof initial\r\n","import axios from \"axios\";\r\nimport {UserType} from \"../types/types\";\r\n\r\nexport const api = axios.create({\r\n    withCredentials: true,\r\n    headers: {\r\n        'API-KEY': '5a02e0ce-1492-47cd-b69a-6445510cc320',\r\n    },\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.0/'\r\n})\r\n\r\nexport enum ResultCodesEnum {\r\n    Success = 0,\r\n    Error = 1,\r\n}\r\n\r\nexport enum ResultCodeForCaptchaEnum {\r\n    CaptchaIsRequired = 10,\r\n}\r\n\r\nexport type GetItemsType = {\r\n    items: Array<UserType>\r\n    totalCount: number\r\n    error: string | null\r\n}\r\n","import {LoginFormDataType} from \"../../../types/types\";\r\nimport React from \"react\";\r\nimport {ErrorMessage, Field, Form, Formik} from \"formik\";\r\n\r\ntype Props = {\r\n    login: (formData: LoginFormDataType) => void\r\n    captchaUrl: string | null\r\n}\r\n\r\nenum LoginFormFields {\r\n    email = 'email',\r\n    password = 'password',\r\n    rememberMe = 'rememberMe',\r\n    captcha = 'captcha'\r\n}\r\n\r\nexport const LoginForm: React.FC<Props> = React.memo(({login, captchaUrl}) => {\r\n    const initialValuesOfForm = {\r\n        [LoginFormFields.email]: '',\r\n        [LoginFormFields.password]: '',\r\n        [LoginFormFields.rememberMe]: false,\r\n    }\r\n\r\n    const onSubmit = (formData: LoginFormDataType, {setSubmitting}: {\r\n        setSubmitting: (isSubmitting: boolean) => void\r\n    }) => {\r\n        login(formData)\r\n\r\n        setSubmitting(false)\r\n    }\r\n\r\n    return (\r\n        <Formik\r\n            onSubmit={onSubmit}\r\n            initialValues={initialValuesOfForm}\r\n        >\r\n            {({isSubmitting}) => (\r\n                <Form>\r\n                    <div>\r\n                        <Field type={'text'} name={LoginFormFields.email}/>\r\n                        <ErrorMessage name={LoginFormFields.email} component=\"div\"/>\r\n                    </div>\r\n\r\n                    <div>\r\n                        <Field type={'password'} name={LoginFormFields.password}/>\r\n                        <ErrorMessage name={LoginFormFields.password} component=\"div\"/>\r\n                    </div>\r\n\r\n                    <div>\r\n                        <label>\r\n                            <Field placeholder={'remember me'} type={'checkbox'}\r\n                                   name={LoginFormFields.rememberMe}/>\r\n                            remember me\r\n                            <ErrorMessage name={LoginFormFields.rememberMe} component=\"div\"/>\r\n                        </label>\r\n                    </div>\r\n\r\n                    {captchaUrl &&\r\n                    <div>\r\n                        <img src={captchaUrl} alt=\"captcha\"/>\r\n                        <div>\r\n                            <Field name={LoginFormFields.captcha} type={'text'} component={'input'}/>\r\n                            <ErrorMessage name={LoginFormFields.captcha} component=\"div\"/>\r\n                        </div>\r\n                    </div>}\r\n\r\n                    <div>\r\n                        <button type=\"submit\" disabled={isSubmitting}>\r\n                            Login\r\n                        </button>\r\n                    </div>\r\n                </Form>\r\n            )}\r\n        </Formik>\r\n    )\r\n})","import React, {FC} from 'react';\r\nimport {NavLink, useHistory} from \"react-router-dom\";\r\nimport {TeamOutlined, UserOutlined} from '@ant-design/icons';\r\nimport {Affix, Layout, Menu} from \"antd\";\r\n\r\nexport const Navbar: FC = (props) => {\r\n    const {Sider} = Layout;\r\n\r\n    const link = useHistory()\r\n    const currentMenuKey = link.location.pathname\r\n\r\n    const links = [{\r\n        to: '/profile',\r\n        name: 'Profile',\r\n        icon: <UserOutlined/>\r\n        // }, {\r\n        //     to: '/dialogs',\r\n        //     name: 'Dialogs',\r\n        //     icon: <MessageOutlined/>\r\n    }, {\r\n        to: '/users',\r\n        name: 'Users',\r\n        icon: <TeamOutlined/>\r\n    }, {\r\n        to: '/chat',\r\n        name: 'Chat',\r\n        icon: <TeamOutlined/>\r\n    }]\r\n\r\n    return (\r\n        <Affix offsetTop={100}>\r\n            <Sider className=\"site-layout-background\" width={200}>\r\n                <Menu\r\n                    mode=\"inline\"\r\n                    defaultSelectedKeys={[(currentMenuKey === '/' ? links[0].to : currentMenuKey)]}\r\n                    style={{height: '100%'}}\r\n                >\r\n                    {links.map(link => (\r\n                        <Menu.Item key={link.to} icon={link.icon} >\r\n                            <NavLink to={link.to}>\r\n                                {link.name}\r\n                            </NavLink>\r\n                        </Menu.Item>\r\n                    ))}\r\n                </Menu>\r\n            </Sider>\r\n        </Affix>\r\n\r\n    );\r\n}\r\n","import React from 'react';\r\n\r\nexport const News = () => {\r\n    return (\r\n        <>\r\n            news\r\n        </>\r\n    )\r\n}","import React from 'react';\r\n\r\nconst Music = () => {\r\n    return (\r\n        <>\r\n            music\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Music;","import React from 'react';\r\n\r\nconst Settings = () => {\r\n    return (\r\n        <>\r\n            settings\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Settings;","import {api} from \"./api\";\r\n\r\ntype GetCaptchaUrlResponseType = {\r\n    url: string\r\n}\r\n\r\nexport const securityAPI = {\r\n    getCaptchaUrl() {\r\n        return api.get<GetCaptchaUrlResponseType>(`security/get-captcha-url`)\r\n            .then(res => res)\r\n    }\r\n}","import {LoginFormDataType} from \"../types/types\";\r\nimport {api, ResultCodeForCaptchaEnum, ResultCodesEnum} from \"./api\";\r\n\r\nexport type APIResponseType<D = {}, RC = ResultCodesEnum> = {\r\n    data: D,\r\n    messages: Array<string>\r\n    resultCode: RC\r\n}\r\n\r\ntype MeResponseDataType = {\r\n    id: number\r\n    email: string\r\n    login: string\r\n}\r\n\r\ntype LoginResponseDataType = {\r\n    userId: number\r\n}\r\n\r\nexport const authAPI = {\r\n    me() {\r\n        return api.get<APIResponseType<MeResponseDataType>>(`auth/me`)\r\n            .then(res => res.data);\r\n    },\r\n    login(formData: LoginFormDataType) {\r\n        return api.post<APIResponseType<LoginResponseDataType, ResultCodesEnum | ResultCodeForCaptchaEnum>>(`auth/login`, formData)\r\n            .then(res => res.data);\r\n    },\r\n    logout() {\r\n        return api.delete(`auth/login`)\r\n            .then(res => res.data);\r\n    }\r\n}","import {ResultCodeForCaptchaEnum, ResultCodesEnum} from \"../../api/api\"\r\nimport {LoginFormDataType} from \"../../types/types\";\r\nimport {BaseThunkType, InferActionsTypes} from \"../redux-store\";\r\nimport {securityAPI} from \"../../api/SecurityAPI\";\r\nimport {authAPI} from \"../../api/AuthAPI\";\r\n\r\ntype InitialType = typeof initial\r\n\r\n/**\r\n * INITIAL\r\n *\r\n * isAuth - [default: false] - Can be (true) or (false). If user is not authorized then (false) else (true)\r\n * captchaUrl - [default: null] - Con be (null) or (string). If captcha is not required then (null) else (string)\r\n * login - [default: null] - Con be (null) or (string). If user is not authorized then (null) else (string)\r\n * userId - [default: null] - Con be (null) or (string). If user is not authorized then (null) else (string)\r\n * email - [default: null] - Con be (null) or (string). If user is not authorized then (null) else (string)\r\n */\r\nconst initial = {\r\n    userId: null as number | null,\r\n    email: null as string | null,\r\n    login: null as string | null,\r\n    isAuth: false,\r\n    captchaUrl: null as string | null\r\n}\r\n\r\n/**\r\n * AUTH REDUCER\r\n *\r\n * Reducer takes a current (state) from store and (action) which action creator send him\r\n *\r\n * state - [default: initial] - Includes current state\r\n * action - [] - Includes action (type) and data\r\n *\r\n * return new State copy\r\n */\r\nexport const authReducer = (state = initial, action: ActionTypes): InitialType => {\r\n    switch (action.type) {\r\n        case 'SOCIAL/AUTH/SET_AUTH_USER_DATA': {\r\n            return {\r\n                ...state,\r\n                ...action.payload,\r\n            }\r\n        }\r\n        case 'SOCIAL/AUTH/GET_CAPTCHA_URL_SUCCESS': {\r\n            return {\r\n                ...state,\r\n                captchaUrl: action.captchaUrl\r\n            }\r\n        }\r\n        default: {\r\n            return state;\r\n        }\r\n    }\r\n}\r\n\r\nexport const actions = {\r\n    setAuthUserData: (userId: number | null, email: string | null, login: string | null, isAuth: boolean) => ({\r\n        type: 'SOCIAL/AUTH/SET_AUTH_USER_DATA',\r\n        payload: {userId, email, login, isAuth},\r\n    } as const),\r\n    getCaptchaUrlSuccess: (captchaUrl: string | null) => ({\r\n        type: 'SOCIAL/AUTH/GET_CAPTCHA_URL_SUCCESS',\r\n        captchaUrl: captchaUrl\r\n    } as const),\r\n}\r\n\r\nexport const me = (): ThunkType => async (dispatch) => {\r\n    const data = await authAPI.me();\r\n\r\n    if (data.resultCode === ResultCodesEnum.Success) {\r\n        const {id, email, login} = data.data;\r\n\r\n        dispatch(actions.setAuthUserData(id, email, login, true))\r\n    }\r\n}\r\n\r\nexport const login = (formData: LoginFormDataType): ThunkType => async (dispatch) => {\r\n    const data = await authAPI.login(formData);\r\n\r\n    if (data.resultCode === ResultCodesEnum.Success) {\r\n        await dispatch(me());\r\n        dispatch(actions.getCaptchaUrlSuccess(null));\r\n    } else {\r\n        if (data.resultCode === ResultCodeForCaptchaEnum.CaptchaIsRequired) {\r\n            await dispatch(getCaptcha());\r\n        }\r\n\r\n        if (data.messages?.length) {\r\n            alert(data.messages[0]);\r\n        }\r\n    }\r\n}\r\n\r\nexport const getCaptcha = (): ThunkType => async (dispatch) => {\r\n    const response = await securityAPI.getCaptchaUrl();\r\n    const captchaUrl = response.data.url;\r\n\r\n    dispatch(actions.getCaptchaUrlSuccess(captchaUrl))\r\n}\r\n\r\n// если ограничиваем только нашими actions, то тогда ThunkType, иначе - BaseThunk\r\nexport const logout = (): ThunkType => async (dispatch) => {\r\n    const data = await authAPI.logout();\r\n\r\n    if (data.resultCode === ResultCodesEnum.Success) {\r\n        dispatch(actions.setAuthUserData(null, null, null, false));\r\n    } else {\r\n        if (data.messages?.length) {\r\n            alert(data.messages[0]);\r\n        }\r\n    }\r\n}\r\n\r\n// type DispatchType = Dispatch<ActionTypes>\r\ntype ThunkType = BaseThunkType<ActionTypes> // | FormAction> from redux-forms. Если ограничиваем только нашими actions\r\ntype ActionTypes = InferActionsTypes<typeof actions>\r\n","import React from 'react';\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {login} from \"../../Redux/reducers/authReducer\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {selectCaptchaUrl, selectIsAuth} from \"../../Redux/selectors/authSelectors\";\r\nimport {LoginFormDataType} from \"../../types/types\";\r\nimport {LoginForm} from \"./LoginForm/LoginForm\";\r\n\r\nexport const LoginPage: React.FC = (props) => {\r\n    const captchaUrl = useSelector(selectCaptchaUrl)\r\n    const isAuth = useSelector(selectIsAuth)\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const onLogin = (formData: LoginFormDataType) => {\r\n        dispatch(login(formData))\r\n    }\r\n\r\n    if (isAuth) {\r\n        return <Redirect to={'/profile'}/>\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <h1>LOGIN</h1>\r\n            <LoginForm login={onLogin} captchaUrl={captchaUrl}/>\r\n        </>\r\n    )\r\n}","import {me} from \"./authReducer\"\r\nimport {InferActionsTypes} from \"../redux-store\"\r\n\r\n/**\r\n * Type of initial state for AppReducer\r\n */\r\ntype InitialStateType = typeof initial\r\n\r\n/**\r\n * INITIAL\r\n *\r\n * initialized - [default: false] - Con be (false) or (true). If app is initialised then (true) else (false)\r\n */\r\nconst initial = {\r\n    initialized: false,\r\n}\r\n\r\nexport const appReducer = (state = initial, action: ActionTypes): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'SOCIAL/APP/INITIALIZED_SUCCESS': {\r\n            return {\r\n                ...state,\r\n                initialized: true\r\n            }\r\n        }\r\n        default: {\r\n            return state;\r\n        }\r\n    }\r\n}\r\n\r\n// type DispatchType = Dispatch<ActionTypes>\r\n// type ThunkType = BaseThunkType<ActionTypes>\r\n\r\ntype ActionTypes = InferActionsTypes<typeof actions>\r\n\r\n/**\r\n * const func = (): InitializedSuccessActionType => {} значит, что фукнция возвращает объект типа InitializedSuccessActionType\r\n */\r\n\r\nexport const actions = {\r\n    initializedSuccess: () => ({\r\n        type: 'SOCIAL/APP/INITIALIZED_SUCCESS',\r\n    } as const)\r\n}\r\n\r\nexport const initializeApp = () => (dispatch: any) => {\r\n    const promise = dispatch(me());\r\n\r\n    Promise.all([promise])\r\n        .then(() => {\r\n            dispatch(actions.initializedSuccess());\r\n        })\r\n}","export const updateObjectInArray = (items: Array<any>, itemId: number, objPropName: string, newObjProps: object) => {\r\n    return items.map(item => {\r\n        if (item[objPropName] === itemId) {\r\n            return {\r\n                ...item,\r\n                ...newObjProps\r\n            }\r\n        }\r\n\r\n        return item;\r\n    })\r\n}","import {api, GetItemsType} from \"./api\";\r\nimport {APIResponseType} from \"./AuthAPI\";\r\n\r\nexport const usersAPI = {\r\n    getUsers(pageSize = 5, pageNumber = 1, term: string = '', friend: null | boolean = null) {\r\n        return api.get<GetItemsType>(`users?count=${pageSize}&page=${pageNumber}&term=${term}` + (!friend ? `` : `&friend=${friend}`))\r\n            .then(res => res.data)\r\n    },\r\n    follow(userId: number) {\r\n        return api.post<APIResponseType>(`follow/${userId}`)\r\n            .then(res => res.data)\r\n    },\r\n    unfollow(userId: number) {\r\n        return api.delete<APIResponseType>(`follow/${userId}`)\r\n            .then(res => res.data);  // as Promise<ResponseType>\r\n    }\r\n}\r\n","import {ResultCodesEnum} from \"../../api/api\";\r\nimport {updateObjectInArray} from \"../../utils/helpers/objectHelpers\";\r\nimport {UserType} from \"../../types/types\";\r\nimport {BaseThunkType, InferActionsTypes} from \"../redux-store\";\r\nimport {Dispatch} from \"redux\";\r\nimport {usersAPI} from \"../../api/UsersAPI\";\r\nimport {APIResponseType} from \"../../api/AuthAPI\";\r\n\r\n/**\r\n * INITIAL\r\n *\r\n * users - [default: []] - Can be (empty array) or (filled array). Array of users\r\n * pageSize - [default: 5] - Con be (number). Users count per page\r\n * totalUsersCount - [default: 0] - Con be (number). Total users count in db\r\n * currentPage - [default: 1] - Con be (number). Which page is showing\r\n * followingInProgress - [default: []] - Con be (empty array) or (filled array). This array includes users which need do following or unfollowing\r\n * isFetching - [default: false] - Con be (true) or (false). If users is pending then (true) else (false)\r\n */\r\nconst initial = {\r\n    users: [] as Array<UserType>,\r\n    pageSize: 5,\r\n    totalUsersCount: 0,\r\n    currentPage: 1,\r\n    isFetching: false,\r\n    followingInProgress: [] as Array<number>, // array of user ids\r\n    filter: {\r\n        term: '',\r\n        friend: null as null | boolean\r\n    }\r\n}\r\n\r\nexport const usersReducer = (state = initial, action: ActionTypes): InitialType => {\r\n    switch (action.type) {\r\n        case 'SOCIAL/USERS/FOLLOW': {\r\n            return {\r\n                ...state,\r\n                users: updateObjectInArray(state.users, action.userId, 'id', {followed: true})\r\n            }\r\n        }\r\n        case 'SOCIAL/USERS/UNFOLLOW': {\r\n            return {\r\n                ...state,\r\n                users: updateObjectInArray(state.users, action.userId, 'id', {followed: false})\r\n            }\r\n        }\r\n        case 'SOCIAL/USERS/SET_USERS': {\r\n            return {\r\n                ...state,\r\n                users: action.users\r\n            }\r\n        }\r\n        case 'SOCIAL/USERS/SET_TOTAL_USERS_COUNT': {\r\n            return {\r\n                ...state,\r\n                totalUsersCount: action.totalUsersCount\r\n            }\r\n        }\r\n        case 'SOCIAL/USERS/SET_CURRENT_PAGE': {\r\n            return {\r\n                ...state,\r\n                currentPage: action.currentPage\r\n            }\r\n        }\r\n        case 'SOCIAL/USERS/SET_IS_FETCHING': {\r\n            return {\r\n                ...state,\r\n                isFetching: action.isFetching\r\n            }\r\n        }\r\n        case 'SOCIAL/USERS/SET_FOLLOWING_IN_PROGRESS': {\r\n            return {\r\n                ...state,\r\n                followingInProgress: action.isFetching\r\n                    ? [...state.followingInProgress, action.userId]\r\n                    : state.followingInProgress.filter(id => id !== action.userId)\r\n            }\r\n        }\r\n        case 'SOCIAL/USERS/SET_FILTER': {\r\n            return {\r\n                ...state,\r\n                filter: action.payload\r\n            }\r\n        }\r\n        default: {\r\n            return state;\r\n        }\r\n    }\r\n}\r\n\r\nexport const actions = {\r\n    followSuccess: (userId: number) => ({\r\n        type: 'SOCIAL/USERS/FOLLOW',\r\n        userId: userId\r\n    } as const),\r\n    unfollowSuccess: (userId: number) => ({\r\n        type: 'SOCIAL/USERS/UNFOLLOW',\r\n        userId: userId\r\n    } as const),\r\n    setUsers: (users: Array<UserType>) => ({\r\n        type: 'SOCIAL/USERS/SET_USERS',\r\n        users: users\r\n    } as const),\r\n    setTotalUsersCount: (totalUsersCount: number) => ({\r\n        type: 'SOCIAL/USERS/SET_TOTAL_USERS_COUNT',\r\n        totalUsersCount: totalUsersCount\r\n    } as const),\r\n    setCurrentPage: (currentPage: number) => ({\r\n        type: 'SOCIAL/USERS/SET_CURRENT_PAGE',\r\n        currentPage: currentPage\r\n    } as const),\r\n    setIsFetching: (isFetching: boolean) => ({\r\n        type: 'SOCIAL/USERS/SET_IS_FETCHING',\r\n        isFetching: isFetching\r\n    } as const),\r\n    setFollowingInProgress: (isFetching: boolean, userId: number) => ({\r\n        type: 'SOCIAL/USERS/SET_FOLLOWING_IN_PROGRESS',\r\n        isFetching: isFetching,\r\n        userId: userId\r\n    } as const),\r\n    setFilter: (filter: FilterType) => ({\r\n        type: 'SOCIAL/USERS/SET_FILTER',\r\n        payload: filter,\r\n    } as const),\r\n}\r\n\r\nconst _followUnfollowFlow = async (\r\n    dispatch: DispatchType,\r\n    userId: number,\r\n    apiMethod: (userId: number) => Promise<APIResponseType>,\r\n    actionCreator: (userId: number) => ActionTypes\r\n) => {\r\n    const data = await apiMethod(userId)\r\n\r\n    dispatch(actions.setFollowingInProgress(true, userId));\r\n\r\n\r\n    if (data.resultCode === ResultCodesEnum.Success) {\r\n        dispatch(actionCreator(userId))\r\n    }\r\n\r\n    dispatch(actions.setFollowingInProgress(false, userId))\r\n}\r\n\r\nexport const getUsersList = (pageSize: number, page: number, filter: FilterType): ThunkType => async (dispatch) => {\r\n    dispatch(actions.setIsFetching(true))\r\n    dispatch(actions.setFilter(filter))\r\n    dispatch(actions.setCurrentPage(page))\r\n\r\n    const data = await usersAPI.getUsers(pageSize, page, filter.term, filter.friend)\r\n\r\n    dispatch(actions.setUsers(data.items))\r\n    dispatch(actions.setTotalUsersCount(data.totalCount))\r\n    dispatch(actions.setIsFetching(false))\r\n}\r\n\r\nexport const follow = (userId: number): ThunkType => async (dispatch) => {\r\n    await _followUnfollowFlow(dispatch, userId, usersAPI.follow, actions.followSuccess);\r\n}\r\n\r\nexport const unfollow = (userId: number): ThunkType => async (dispatch) => {\r\n    await _followUnfollowFlow(dispatch, userId, usersAPI.unfollow, actions.unfollowSuccess);\r\n}\r\n\r\ntype DispatchType = Dispatch<ActionTypes>\r\ntype ThunkType = BaseThunkType<ActionTypes>\r\ntype ActionTypes = InferActionsTypes<typeof actions>\r\nexport type InitialType = typeof initial\r\nexport type FilterType = typeof initial.filter\r\n","import {Action, applyMiddleware, combineReducers, compose, createStore} from \"redux\"\r\nimport {profileReducer} from \"./reducers/profileReducer\"\r\nimport {dialogsReducer} from \"./reducers/dialogsReducer\"\r\nimport {usersReducer} from \"./reducers/usersReducer\"\r\nimport {authReducer} from \"./reducers/authReducer\"\r\nimport thunk, {ThunkAction} from 'redux-thunk'\r\nimport {appReducer} from \"./reducers/appReducer\"\r\n\r\nconst rootReducer = combineReducers({\r\n    profilePage: profileReducer,\r\n    dialogsPage: dialogsReducer,\r\n    usersPage: usersReducer,\r\n    auth: authReducer,\r\n    app: appReducer\r\n})\r\n\r\ntype RootReducerType = typeof rootReducer\r\nexport type AppStateType = ReturnType<RootReducerType>\r\n\r\nexport type InferActionsTypes<T> = T extends { [key: string]: (...args: any[]) => infer U } ? U : never\r\nexport type BaseThunkType<A extends Action, R = Promise<void>> = ThunkAction<R, AppStateType, unknown, A>\r\n\r\n// @ts-ignore\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose\r\n\r\nconst store = createStore(rootReducer, composeEnhancers(\r\n    applyMiddleware(thunk)\r\n))\r\n\r\nexport default store","import React from 'react';\r\n\r\nexport function withSuspense<WCP>(WrappedComponent: React.ComponentType<WCP>) {\r\n    const loading = <div>Loading...</div>;\r\n\r\n    return (props: WCP) => {\r\n        return (\r\n            <React.Suspense fallback={loading}>\r\n                <WrappedComponent {...props}/>\r\n            </React.Suspense>\r\n        )\r\n    }\r\n}\r\n","import {ErrorMessage, Field, Form, Formik} from \"formik\"\r\nimport React from \"react\"\r\nimport {FilterType} from \"../../Redux/reducers/usersReducer\"\r\nimport {useSelector} from \"react-redux\";\r\nimport {getUsersFilterSelector} from \"../../Redux/selectors/usersSelectors\";\r\n\r\nenum FieldsEnum {\r\n    term = 'term',\r\n    friend = 'friend'\r\n}\r\n\r\ntype FriendUsersFormType = \"true\" | \"false\" | \"null\"\r\n\r\ntype FormType = {\r\n    term: string,\r\n    friend: FriendUsersFormType\r\n}\r\n\r\ntype Props = {\r\n    onFilterChanged: (filter: FilterType) => void\r\n}\r\n\r\nconst UsersSearchForm: React.FC<Props> = React.memo(({onFilterChanged}) => {\r\n    // const validate = (values: FilterType) => {\r\n    //     const errors: any = {}\r\n    //\r\n    //     if (!values.term) {\r\n    //         errors.term = 'Required'\r\n    //     } else if (validator.isEmail(values.term)) {\r\n    //         errors.term = 'Email is not supported'\r\n    //     }\r\n    //\r\n    //     return errors\r\n    // }\r\n\r\n    const SubmitForm = (values: FormType, {setSubmitting}: { setSubmitting: (isSubmitting: boolean) => void }) => {\r\n        const filter: FilterType = {\r\n            term: values.term,\r\n            friend: JSON.parse(values.friend)\r\n        }\r\n\r\n        onFilterChanged(filter)\r\n\r\n        setSubmitting(false)\r\n    }\r\n\r\n    const filter = useSelector(getUsersFilterSelector)\r\n\r\n    const initialValuesOfForm = {\r\n        [FieldsEnum.term]: filter.term,\r\n        [FieldsEnum.friend]: JSON.stringify(filter.friend) as FriendUsersFormType\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Formik\r\n                initialValues={initialValuesOfForm}\r\n                enableReinitialize\r\n                onSubmit={SubmitForm}\r\n                //validate={validate}\r\n            >\r\n                {\r\n                    ({isSubmitting}) => (\r\n                        <Form>\r\n                            <Field type=\"text\" name={FieldsEnum.term}/>\r\n                            <ErrorMessage name={FieldsEnum.term} component=\"div\"/>\r\n                            <Field name={FieldsEnum.friend} as=\"select\">\r\n                                <option value={'null'}>All</option>\r\n                                <option value={'true'}>Only followed</option>\r\n                                <option value={'false'}>Only unfollowed</option>\r\n                            </Field>\r\n\r\n                            <div>\r\n                                <button type=\"submit\" disabled={isSubmitting}>\r\n                                    Search\r\n                                </button>\r\n                            </div>\r\n                        </Form>\r\n                    )\r\n                }\r\n            </Formik>\r\n        </>\r\n    )\r\n})\r\n\r\nexport default UsersSearchForm","import {createSelector} from \"reselect\";\r\nimport {AppStateType} from \"../redux-store\";\r\n\r\nconst getUsers = (state: AppStateType) => {\r\n    return state.usersPage.users;\r\n};\r\n\r\nexport const getPageSizeSelector = (state: AppStateType) => {\r\n    return state.usersPage.pageSize;\r\n};\r\n\r\nexport const getTotalUsersCountSelector = (state: AppStateType) => {\r\n    return state.usersPage.totalUsersCount;\r\n};\r\n\r\nexport const getCurrentPageSelector = (state: AppStateType) => {\r\n    return state.usersPage.currentPage;\r\n};\r\n\r\nexport const getUsersIsFetchingSelector = (state: AppStateType) => {\r\n    return state.usersPage.isFetching;\r\n};\r\n\r\nexport const getFollowingInProgressSelector = (state: AppStateType) => {\r\n    return state.usersPage.followingInProgress;\r\n};\r\n\r\nexport const getUsersFilterSelector = (state: AppStateType) => {\r\n    return state.usersPage.filter;\r\n};\r\n\r\nexport const getUsersSelector = createSelector(getUsers, (users) => {\r\n    return users.filter(u => true);\r\n});\r\n\r\n","import React from 'react';\r\nimport undefinedAva from \"../../../media/user.png\";\r\nimport {NavLink} from \"react-router-dom\";\r\nimport {UserType} from \"../../../types/types\";\r\n\r\ntype Props = {\r\n    unfollow: (userId: number) => void\r\n    follow: (userId: number) => void\r\n    followingInProgress: Array<number>\r\n    user: UserType\r\n}\r\n\r\nconst User: React.FC<Props> = ({unfollow, follow, followingInProgress, user}) => {\r\n    const unfollowButton = (userId: number) => {\r\n        return (\r\n            <button\r\n                onClick={() => {\r\n                    unfollow(userId)\r\n                }}\r\n                disabled={followingInProgress.some(id => id === userId)}\r\n            >\r\n                Unfollow\r\n            </button>\r\n        )\r\n    }\r\n\r\n    const followButton = (userId: number) => {\r\n        return (\r\n            <button\r\n                onClick={() => {\r\n                    follow(userId)\r\n                }}\r\n                disabled={followingInProgress.some(id => id === userId)}\r\n            >\r\n                Follow\r\n            </button>\r\n        )\r\n    }\r\n\r\n    const {id, photos, name, status, followed} = user\r\n\r\n    const styles = {\r\n        userPhoto: {\r\n            maxWidth: 50\r\n        }\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <span>\r\n                <div>\r\n                    <NavLink to={'/profile/' + id}>\r\n                        <img\r\n                            src={photos.small ?? undefinedAva}\r\n                            alt={'userAvatar'}\r\n                            style={styles.userPhoto}\r\n                        />\r\n                    </NavLink>\r\n                </div>\r\n                <div>\r\n                    {followed ? unfollowButton(id) : followButton(id)}\r\n                </div>\r\n            </span>\r\n            <span>\r\n                <span>\r\n                    <div>{name}</div>\r\n                    <div>{status}</div>\r\n                </span>\r\n                <span>\r\n                    <div>location.country</div>\r\n                    <div>location.city</div>\r\n                </span>\r\n            </span>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default User;\r\n","import React, {useState} from 'react';\r\n\r\ntype Props = {\r\n    totalItemsCount: number\r\n    pageSize: number\r\n    currentPage: number\r\n    changePage: (page: number) => void\r\n    portionSize?: number\r\n}\r\n\r\nexport const Paginator: React.FC<Props> = (props) => {\r\n    const {totalItemsCount, pageSize, currentPage, changePage, portionSize = 5} = props\r\n\r\n    const styles = {\r\n        paginator: {\r\n            margin: 10\r\n        },\r\n        pageNumber: {\r\n            padding: 2,\r\n            border: '1px solid grey'\r\n        },\r\n        selectedPage: {\r\n            fontWeight: 'bold',\r\n            borderColor: 'black'\r\n        }\r\n    }\r\n\r\n    const pageCount = Math.ceil(totalItemsCount / pageSize);\r\n    const pages = [];\r\n\r\n    for (let i = 1; i <= pageCount; i++) {\r\n        pages.push(i)\r\n    }\r\n\r\n    const portionCount = Math.ceil(pageCount / portionSize);\r\n    const [portionNumber, setPortionNumber] = useState(1);\r\n    const leftPositionPageNumber = (portionNumber - 1) * portionSize + 1;\r\n    const rightPortionPageNumber = portionNumber * portionSize;\r\n\r\n    const prevPages = () => {\r\n        setPortionNumber(portionNumber - 1);\r\n    }\r\n\r\n    const nextPages = () => {\r\n        setPortionNumber(portionNumber + 1);\r\n    }\r\n\r\n    return (\r\n        <div style={styles.paginator}>\r\n            {portionNumber > 1 &&\r\n            <button onClick={prevPages}>\r\n                Prev\r\n            </button>}\r\n            {pages\r\n                .filter(page => page >= leftPositionPageNumber && page <= rightPortionPageNumber)\r\n                .map(page => {\r\n                    return (\r\n                        <span\r\n                            onClick={() => changePage(page)}\r\n                            key={page}\r\n                            style={styles.pageNumber}\r\n                        >\r\n                            {page}\r\n                    </span>\r\n                    )\r\n                })}\r\n            {portionCount > portionNumber &&\r\n            <button onClick={nextPages}>\r\n                Prev\r\n            </button>}\r\n        </div>\r\n    )\r\n}\r\n","import React, {FC, useEffect} from 'react'\r\nimport User from \"./User/User\"\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {\r\n    getCurrentPageSelector,\r\n    getFollowingInProgressSelector,\r\n    getPageSizeSelector,\r\n    getTotalUsersCountSelector,\r\n    getUsersFilterSelector,\r\n    getUsersSelector\r\n} from \"../../Redux/selectors/usersSelectors\";\r\nimport {FilterType, follow, getUsersList, unfollow} from \"../../Redux/reducers/usersReducer\";\r\nimport UsersSearchForm from \"./UsersSearchForm\";\r\nimport {Paginator} from \"../common/Paginator/Paginator\";\r\nimport {useHistory} from 'react-router-dom';\r\nimport qs from 'qs'\r\n\r\ntype QueryParamsType = {\r\n    term?: string\r\n    page?: string\r\n    friend?: string\r\n}\r\nexport const Users: FC = (props) => {\r\n    const users = useSelector(getUsersSelector)\r\n    const followingInProgress = useSelector(getFollowingInProgressSelector)\r\n    const totalUsersCount = useSelector(getTotalUsersCountSelector)\r\n    const currentPage = useSelector(getCurrentPageSelector)\r\n    const pageSize = useSelector(getPageSizeSelector)\r\n    const filter = useSelector(getUsersFilterSelector)\r\n\r\n    const dispatch = useDispatch()\r\n    const history = useHistory()\r\n\r\n    const unfollowUser = (userId: number) => {\r\n        dispatch(unfollow(userId))\r\n    }\r\n\r\n    const followUser = (userId: number) => {\r\n        dispatch(follow(userId))\r\n    }\r\n\r\n    const onChangePage = (pageNumber: number) => {\r\n        dispatch(getUsersList(pageSize, pageNumber, filter))\r\n    }\r\n\r\n    const onFilterChanged = (filter: FilterType) => {\r\n        dispatch(getUsersList(pageSize, 1, filter)) //current page = 1, если обновляем фильтр\r\n    }\r\n\r\n    useEffect(() => {\r\n        dispatch(getUsersList(pageSize, currentPage, filter))\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        const parsedQs = qs.parse(history.location.search.substr(1)) as QueryParamsType\r\n\r\n        let actualPage = currentPage\r\n        let actualFilter = filter\r\n\r\n        if (parsedQs.page) {\r\n            actualPage = JSON.parse(parsedQs.page)\r\n        }\r\n\r\n        if (parsedQs.term) {\r\n            actualFilter = {...actualFilter, term: parsedQs.term as string}\r\n        }\r\n\r\n        if (parsedQs.friend) {\r\n            actualFilter = {...actualFilter, friend: JSON.parse(parsedQs.friend)}\r\n        }\r\n\r\n        dispatch(getUsersList(pageSize, actualPage, actualFilter))\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        const queryParams: QueryParamsType = {}\r\n\r\n        if (filter.term) {\r\n            queryParams.term = filter.term\r\n        }\r\n\r\n        if (filter.friend !== null) {\r\n            queryParams.friend = JSON.stringify(filter.friend)\r\n        }\r\n\r\n        if (currentPage !== 1) {\r\n            queryParams.page = JSON.stringify(currentPage)\r\n        }\r\n\r\n        history.push({\r\n            pathname: '/users',\r\n            search: qs.stringify(queryParams)\r\n        })\r\n    }, [filter, currentPage])\r\n\r\n    return (\r\n        <>\r\n            <UsersSearchForm onFilterChanged={onFilterChanged}/>\r\n            <Paginator\r\n                currentPage={currentPage}\r\n                changePage={onChangePage}\r\n                totalItemsCount={totalUsersCount}\r\n                pageSize={pageSize}\r\n            />\r\n            {users.map(user =>\r\n                <User\r\n                    key={user.id}\r\n                    user={user}\r\n                    follow={followUser}\r\n                    unfollow={unfollowUser}\r\n                    followingInProgress={followingInProgress}\r\n                />\r\n            )}\r\n        </>\r\n    )\r\n}","import {useSelector} from \"react-redux\"\r\nimport React, {FC} from 'react'\r\nimport {getUsersIsFetchingSelector} from \"../../Redux/selectors/usersSelectors\"\r\nimport {Users} from \"./Users\";\r\nimport {Preloader} from \"../common/Preloader/Preloader\";\r\n\r\nexport const UsersPage: FC = (props) => {\r\n    const isFetching = useSelector(getUsersIsFetchingSelector)\r\n\r\n    return (\r\n        <>\r\n            {isFetching && <Preloader/>}\r\n            <Users/>\r\n        </>\r\n    )\r\n}","import React, {FC} from 'react'\r\nimport {Affix, Avatar, Button, Col, Layout, Row, Typography} from \"antd\"\r\nimport {LogoutOutlined} from '@ant-design/icons'\r\nimport {useDispatch, useSelector} from \"react-redux\"\r\nimport {selectIsAuth, selectLogin} from \"../../Redux/selectors/authSelectors\"\r\nimport {logout} from \"../../Redux/reducers/authReducer\"\r\nimport {NavLink} from \"react-router-dom\"\r\nimport {selectUserAvatar} from \"../../Redux/selectors/profileSelectors\"\r\n\r\nexport const Header: FC = (props) => {\r\n    const {Header} = Layout\r\n    const {Text} = Typography\r\n\r\n    const isAuth = useSelector(selectIsAuth)\r\n    const login = useSelector(selectLogin)\r\n    const avatar = useSelector(selectUserAvatar)\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const onLogout = () => {\r\n        dispatch(logout())\r\n    }\r\n\r\n    return (\r\n        <Affix offsetTop={0}>\r\n            <Header>\r\n                <Row>\r\n                    <Col span={21}>\r\n                        <Text code={true} style={{color: 'white', fontSize: '2em'}}>{`<AXT SOCIAL />`}</Text>\r\n                    </Col>\r\n                    {isAuth ?\r\n                        <>\r\n                            <Col span={1}>\r\n                                <Avatar alt={'user avatar'} src={avatar?.small ?? ''}/>\r\n                            </Col>\r\n                            <Col span={1}>\r\n                                <Text style={{color: \"white\"}}>{login}</Text>\r\n                            </Col>\r\n                            <Col span={1}>\r\n                                <Button\r\n                                    type={\"link\"}\r\n                                    style={{color: \"white\"}}\r\n                                    shape=\"circle\"\r\n                                    icon={<LogoutOutlined/>}\r\n                                    onClick={onLogout}\r\n                                    size={\"large\"}\r\n                                />\r\n                            </Col>\r\n                        </> :\r\n                        <Col span={1}>\r\n                            <Button>\r\n                                <NavLink to={'/login'}>\r\n                                    Login\r\n                                </NavLink>\r\n                            </Button>\r\n                        </Col>\r\n                    }\r\n                </Row>\r\n            </Header>\r\n        </Affix>\r\n    );\r\n}","import React, {CSSProperties, FC} from 'react';\r\nimport {Affix, Button, Layout} from \"antd\"\r\n\r\nexport const Footer: FC = (props) => {\r\n    const {Footer} = Layout\r\n\r\n    const styles = {\r\n        footer: {\r\n            textAlign: \"center\"\r\n        } as CSSProperties\r\n    }\r\n\r\n    return (\r\n        <Affix offsetBottom={0}>\r\n            <Footer style={styles.footer}>\r\n                Social Network (2019 - 2021). Created by\r\n                <Button\r\n                    type={\"link\"}\r\n                    href={'https://t.me/axtvlad'}\r\n                    target={'_blank'}\r\n                    rel={'noreferrer'}\r\n                >\r\n                    Axt Vladislav\r\n                </Button>\r\n            </Footer>\r\n        </Affix>\r\n    );\r\n}","import React, {FC, useEffect, useState} from 'react'\r\nimport {Avatar} from \"antd\";\r\n\r\nconst ws = new WebSocket('wss://social-network.samuraijs.com/handlers/ChatHandler.ashx')\r\n\r\nexport type ChatMessageType = {\r\n    message: string\r\n    photo: string\r\n    userId: number\r\n    userName: string\r\n}\r\n\r\nexport const ChatPage: FC = () => {\r\n    const [messages, setMessages] = useState<ChatMessageType[]>([])\r\n\r\n    useEffect(() => {\r\n        ws.addEventListener('message', e => {\r\n            setMessages((prevMessages) => [...prevMessages, ...JSON.parse(e.data)])\r\n        })\r\n    }, [])\r\n\r\n    const Messages: FC = () => {\r\n        return (\r\n            <div style={{height: 400, overflow: 'auto'}}>\r\n                {messages.map((m: ChatMessageType) => <Message message={m} key={m.userId + Math.random()}/>)}\r\n            </div>\r\n        )\r\n    }\r\n\r\n    type MessageProps = {\r\n        message: ChatMessageType\r\n    }\r\n\r\n    const Message: FC<MessageProps> = ({message}) => {\r\n        return (\r\n            <div>\r\n                <Avatar src={message.photo} size={\"large\"}/> <b>{message.userName}</b>\r\n                <br/>\r\n                {message.message}\r\n                <hr/>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Messages/>\r\n            <SendMessageForm/>\r\n        </>\r\n    )\r\n}\r\n\r\n\r\nconst SendMessageForm: FC = () => {\r\n    const [message, setMessage] = useState('')\r\n\r\n    const sendMessage = () => {\r\n        if (!message) {\r\n            return\r\n        } else {\r\n            ws.send(message)\r\n\r\n            setMessage('')\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <div>\r\n                <textarea onChange={(e) => setMessage(e.currentTarget.value)} value={message}/>\r\n            </div>\r\n            <div>\r\n                <button onClick={sendMessage}>Send</button>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n","import React from 'react'\r\nimport './App.css'\r\nimport \"antd/dist/antd.css\"\r\nimport {Navbar} from \"./components/Navbar/Navbar\"\r\nimport {News} from \"./components/News/News\"\r\nimport Music from \"./components/Music/Music\"\r\nimport Settings from \"./components/Settings/Settings\"\r\nimport {LoginPage} from \"./components/Login/Login\"\r\nimport {connect, Provider} from \"react-redux\"\r\nimport {compose} from \"redux\"\r\nimport {BrowserRouter, Redirect, Route, Switch, withRouter} from \"react-router-dom\"\r\nimport {initializeApp} from \"./Redux/reducers/appReducer\"\r\nimport {Preloader} from \"./components/common/Preloader/Preloader\"\r\nimport store, {AppStateType} from \"./Redux/redux-store\"\r\nimport {withSuspense} from \"./hoc/withSuspense\"\r\nimport {UsersPage} from \"./components/Users/UsersPage\";\r\nimport {Layout} from 'antd';\r\nimport {Header} from \"./components/Header/Header\";\r\nimport {Footer} from \"./components/Footer/Footer\";\r\nimport {ChatPage} from \"./components/pages/Chat/ChatPage\";\r\n\r\nconst DialogsContainer = React.lazy(() => import (\"./components/Dialogs/DialogsContainer\"))\r\nconst ProfileContainer = React.lazy(() => import (\"./components/Profile/ProfileContainer\"))\r\n\r\nconst SuspendedDialogsContainer = withSuspense(DialogsContainer)\r\nconst SuspendedProfileContainer = withSuspense(ProfileContainer)\r\n\r\nconst {Content} = Layout;\r\n\r\ntype Props = {\r\n    initializeApp: () => void\r\n    initialized: boolean\r\n}\r\n\r\nclass App extends React.Component<Props> {\r\n    componentDidMount() {\r\n        const {initializeApp} = this.props\r\n\r\n        initializeApp();\r\n    }\r\n\r\n    render() {\r\n        const {initialized} = this.props;\r\n\r\n        if (!initialized) {\r\n            return <Preloader/>\r\n        }\r\n\r\n        return (\r\n            <Layout >\r\n                <Header/>\r\n                <Content style={{padding: '0 50px'}}>\r\n                    <Layout className=\"site-layout-background\" style={{padding: '24px 0'}}>\r\n                        <Navbar/>\r\n                        <Content style={{padding: '0 24px', minHeight: 280}}>\r\n                            <Switch>\r\n                                <Route render={() => <SuspendedDialogsContainer/>} path={'/dialogs'}/>\r\n                                <Route render={() => <SuspendedProfileContainer/>} path={'/profile/:userId?'}/>\r\n                                <Route render={() => <UsersPage/>} path={'/users'}/>\r\n                                <Route render={() => <News/>} path={'/news'}/>\r\n                                <Route render={() => <Music/>} path={'/music'}/>\r\n                                <Route render={() => <Settings/>} path={'/settings'}/>\r\n                                <Route render={() => <LoginPage/>} path={'/login'}/>\r\n                                <Route render={() => <ChatPage/>} path={'/chat'}/>\r\n                                <Redirect exact from=\"/\" to=\"/profile\"/>\r\n                            </Switch>\r\n                        </Content>\r\n                    </Layout>\r\n                </Content>\r\n                <Footer/>\r\n            </Layout>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType) => {\r\n    return {\r\n        initialized: state.app.initialized,\r\n    }\r\n}\r\n\r\nconst AppContainer = compose<React.ComponentType>(\r\n    withRouter,\r\n    connect(mapStateToProps, {initializeApp})\r\n)(App);\r\n\r\nconst SocialApp: React.FC = () => {\r\n    return (\r\n        <BrowserRouter>\r\n            <Provider store={store}>\r\n                <AppContainer/>\r\n            </Provider>\r\n        </BrowserRouter>\r\n    )\r\n}\r\n\r\nexport default SocialApp;\r\n","import './index.css';\r\nimport ReactDOM from \"react-dom\";\r\nimport React from 'react';\r\nimport SocialApp from \"./App\";\r\n\r\nReactDOM.render(<SocialApp/>, document.getElementById('root'));","import {AppStateType} from \"../redux-store\";\r\n\r\nexport const selectIsAuth = (state: AppStateType) => {\r\n    return state.auth.isAuth;\r\n}\r\n\r\nexport const selectLogin = (state: AppStateType) => {\r\n    return state.auth.login;\r\n}\r\n\r\nexport const selectUserId = (state: AppStateType) => {\r\n    return state.auth.userId;\r\n}\r\n\r\nexport const selectCaptchaUrl = (state: AppStateType) => {\r\n    return state.auth.captchaUrl;\r\n}","import React from 'react';\r\nimport {Spin} from \"antd\";\r\n\r\nexport const Preloader = () => <Spin spinning={true} size={\"large\"}/>\r\n"],"sourceRoot":""}