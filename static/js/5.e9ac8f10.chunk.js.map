{"version":3,"sources":["hoc/withAuthRedirect.tsx","components/Profile/ProfileInfo/ProfileData/ProfileDataForm.tsx","components/Profile/ProfileInfo/ProfileStatus/ProfileStatus.tsx","components/Profile/MyPosts/AddPostForm/AddPostForm.tsx","components/Profile/ProfileInfo/Contact/Contact.tsx","components/Profile/ProfileInfo/ProfileData/ProfileData.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","components/Profile/MyPosts/Post/Post.tsx","components/Profile/MyPosts/MyPosts.tsx","components/Profile/Profile.tsx","components/Profile/ProfileContainer.tsx"],"names":["mapStateToProps","state","isAuth","selectIsAuth","withAuthRedirect","WrappedComponent","connect","props","restProps","to","ProfileDataFormFields","ProfileStatus","profileStatus","updateProfileStatus","useState","editMode","setEditMode","status","setStatus","useEffect","id","onDoubleClick","onChange","e","value","target","onBlur","type","autoFocus","AddPostFormFields","ProfileDataForm","saveProfile","profile","fullName","lookingForAJob","lookingForAJobDescription","aboutMe","contacts","initialValuesOfForm","styles","span","fontWeight","grids","display","width","onSubmit","formData","setSubmitting","initialValues","isSubmitting","style","name","placeholder","component","Object","keys","map","key","initialValue","disabled","Contact","contactTitle","contactValue","paddingLeft","href","rel","ProfileData","editModeOn","isOwner","onClick","ProfileInfo","uploadPhoto","saveProfileData","descriptionBlock","padding","card","bordered","actions","listType","showUploadList","multiple","accept","customRequest","file","icon","CameraOutlined","Meta","avatar","size","src","photos","large","undefinedAva","then","Post","message","likes","item","color","posts","ava","height","borderRadius","small","getUserAvatar","alt","AddPostForm","React","memo","addPost","postText","MyPosts","useSelector","selectPosts","selectProfile","dispatch","useDispatch","postsList","reverse","postsBloc","marginTop","Profile","Preloader","ProfileContainer","refreshProfile","match","currentUserId","getProfile","getProfileStatus","userId","params","this","prevProps","prevState","Component","compose","selectUserId","selectProfileStatus","withRouter"],"mappings":"6LAMMA,EAAkB,SAACC,GACrB,MAAO,CACHC,OAAQC,YAAaF,KAQtB,SAASG,EAAsBC,GAWlC,OAAOC,YAA6CN,EAA7CM,EAV2C,SAACC,GAChBA,EAAxBL,OADmD,IACxCM,EADuC,YAC1BD,EAD0B,YAGzD,OAAKA,EAAML,OAIJ,cAACG,EAAD,eAAsBG,IAHlB,cAAC,IAAD,CAAUC,GAAI,gB,4CCZ5BC,E,8ECgDUC,EAlDwB,SAAC,GAA0C,IAAzCC,EAAwC,EAAxCA,cAAeC,EAAyB,EAAzBA,oBAAyB,EAC7CC,oBAAS,GADoC,mBACtEC,EADsE,KAC5DC,EAD4D,OAEjDF,mBAASF,GAFwC,mBAEtEK,EAFsE,KAE9DC,EAF8D,KAI7EC,qBAAU,WACND,EAAUN,KACX,CAACA,IAkBJ,OACI,sCACMG,GACF,8BACI,4BACI,sBAAMK,GAAI,gBAAiBC,cArBxB,WACfL,GAAY,IAoBA,SACKJ,GAAiB,aAK7BG,GACD,8BACI,uBACIO,SApBY,SAACC,GACzB,IAAMC,EAAQD,EAAEE,OAAOD,MAEvBN,EAAUM,IAkBEE,OA3BI,WAChBV,GAAY,GAEZH,EAAoBI,IAyBRO,MAAOP,EACPU,KAAM,OACNC,WAAW,U,yBDxC1BlB,K,oBAAAA,E,gCAAAA,E,sDAAAA,E,mBAAAA,M,KAOE,IERFmB,EFQQC,EAAmC,SAAC,GAA4B,IAAD,EAA1BC,EAA0B,EAA1BA,YAAaC,EAAa,EAAbA,QACpDC,EAA0ED,EAA1EC,SAAUC,EAAgEF,EAAhEE,eAAgBC,EAAgDH,EAAhDG,0BAA2BC,EAAqBJ,EAArBI,QAASC,EAAYL,EAAZK,SAE/DC,GAAmB,mBACpB5B,EAAsBuB,SAAWA,GADb,cAEpBvB,EAAsBwB,eAAiBA,GAFnB,cAGpBxB,EAAsByB,0BAA4BA,GAH9B,cAIpBzB,EAAsB0B,QAAUA,GAJZ,yBAKXC,GALW,GAcnBE,EAAS,CACXC,KAAM,CACFC,WAAY,QAEhBC,MAAO,CACHC,QAAS,OACTC,MAAO,KAEXV,eAAgB,CACZS,QAAS,SAIjB,OACI,cAAC,IAAD,CACIE,SArBS,SAACC,EAAD,GAAyG,IAAxEC,EAAuE,EAAvEA,cAC9ChB,EAAYe,GAEZC,GAAc,IAmBVC,cAAeV,EAFnB,SAKQ,gBAAEW,EAAF,EAAEA,aAAF,OACI,eAAC,IAAD,CAAMC,MAAOX,EAAOG,MAApB,UACI,gCACI,sBAAMQ,MAAOX,EAAOC,KAApB,wBACA,cAAC,IAAD,CACIW,KAAMzC,EAAsBuB,SAC5BmB,YAAa,YACbzB,KAAM,YAGd,gCACI,sBAAMuB,MAAOX,EAAOC,KAApB,gCACA,cAAC,IAAD,CACIU,MAAOX,EAAOL,eACdiB,KAAMzC,EAAsBwB,eAC5BP,KAAM,gBAGd,gCACI,sBAAMuB,MAAOX,EAAOC,KAApB,uBACA,cAAC,IAAD,CACIW,KAAMzC,EAAsByB,0BAC5BiB,YAAa,YACbC,UAAW,gBAGnB,gCACI,sBAAMH,MAAOX,EAAOC,KAApB,sBACA,cAAC,IAAD,CACIW,KAAMzC,EAAsB0B,QAC5BgB,YAAa,WACbC,UAAW,gBAGnB,gCACI,yCADJ,IAEKC,OAAOC,KAAKlB,GAAUmB,KAAI,SAAAC,GAAG,OAC1B,gCACI,sBAAMP,MAAOX,EAAOC,KAApB,SAA2BiB,IAC3B,cAAC,IAAD,CACIN,KAAM,YAAcM,EACpBL,YAAaK,EACb9B,KAAM,OACN+B,aAAcrB,EAASoB,OANrBA,SAWlB,8BACI,wBAAQ9B,KAAK,SAASgC,SAAUV,EAAhC,6EG9FfW,EAA2B,SAAC,GAAkC,IAAjCC,EAAgC,EAAhCA,aAAcC,EAAkB,EAAlBA,aAOpD,OACI,sBAAKZ,MANI,CACLa,YAAa,IAKjB,UACI,4BAAIF,IADR,KAC2B,mBAAGG,KAAMF,EAAcrC,OAAQ,SAAUwC,IAAK,aAA9C,SAA6DH,QC4BjFI,EAlCsB,SAAC,GAAoC,IAAnClC,EAAkC,EAAlCA,QAASmC,EAAyB,EAAzBA,WAAYC,EAAa,EAAbA,QACjDnC,EAA0ED,EAA1EC,SAAUC,EAAgEF,EAAhEE,eAAgBC,EAAgDH,EAAhDG,0BAA2BC,EAAqBJ,EAArBI,QAASC,EAAYL,EAAZK,SAErE,OACI,qCACI,gCACI,0CADJ,KACuBJ,KAEvB,gCACI,kDADJ,KAC+BC,EAAiB,MAAQ,QAEvDA,GACD,gCACI,0CADJ,KACuBC,KAGvB,gCACI,yCADJ,KACsBC,KAEtB,gCACI,yCADJ,IAEKkB,OAAOC,KAAKlB,GAAUmB,KAAI,SAAAC,GACvB,OAAO,cAAC,EAAD,CAAmBI,aAAcJ,EAAKK,aAAczB,EAASoB,IAA/CA,SAG5BW,GACD,8BACI,wBAAQC,QAASF,EAAjB,oC,sDCkDDG,EAnEgB,SAAC/D,GAAW,IAChCyB,EAAsFzB,EAAtFyB,QAASnB,EAA6EN,EAA7EM,oBAAqBD,EAAwDL,EAAxDK,cAAewD,EAAyC7D,EAAzC6D,QAASG,EAAgChE,EAAhCgE,YAAaC,EAAmBjE,EAAnBiE,gBADpC,EAGN1D,oBAAS,GAHH,mBAG/BC,EAH+B,KAGrBC,EAHqB,KAsBhCuB,EAAS,CACXkC,iBAAkB,CACdC,QAAS,IAEbC,KAAM,CACF/B,MAAO,MAIf,OACI,sBAAKM,MAAOX,EAAOkC,iBAAnB,UACI,cAAC,IAAD,CACIvB,MAAOX,EAAOoC,KACdC,UAAU,EACVC,QAAST,EAAU,CACf,cAAC,IAAD,CACIU,SAAU,UACVC,gBAAgB,EAChBpD,KAAM,SACNqD,UAAU,EACVC,OAAQ,6BACRC,cAtCI,SAACC,GACrBZ,EAAYY,EAAKA,OA+BL,SAQI,cAAC,IAAD,CAAQxD,KAAM,SAAUyD,KAAM,cAACC,EAAA,EAAD,SAElC,GAdR,SAgBI,cAACC,EAAA,EAAD,CAAMC,OAAQ,cAAC,IAAD,CAAQC,KAAM,IAAKC,IAAKzD,EAAQ0D,OAAOC,OAASC,UAIjExB,GAAWrD,EACN,cAAC,EAAD,CAAiBgB,YAzCX,SAACe,GAGjB0B,EAAgB1B,GACX+C,MAAK,WACF7E,GAAY,OAoCiCgB,QAASA,IACpD,cAAC,EAAD,CACEmC,WA/CG,WACfnD,GAAY,IA+CAgB,QAASA,EACToC,QAASA,IAIjB,cAAC,EAAD,CAAexD,cAAeA,EAAeC,oBAAqBA,Q,eCxEjEiF,EAAwB,SAAC,GAA+B,IAA9B9D,EAA6B,EAA7BA,QAAS+D,EAAoB,EAApBA,QAASC,EAAW,EAAXA,MAC/CzD,EAAS,CACX0D,KAAM,CACFC,MAAO,SAEXC,MAAO,CACHD,MAAO,SAEXE,IAAK,CACDxD,MAAO,GACPyD,OAAQ,GACRC,aAAc,KAQtB,OACI,sBAAKpD,MAAOX,EAAO4D,MAAnB,UACI,sBAAKjD,MAAOX,EAAO0D,KAAnB,UACI,qBAAK/C,MAAOX,EAAO6D,IAAKX,IAPd,WAAO,IAAD,EACxB,wBAAOzD,QAAP,IAAOA,OAAP,EAAOA,EAAS0D,OAAOa,aAAvB,QAAgCX,IAMKY,GAAiBC,IAAK,QAClDV,KAEL,8BACI,yCACUC,Y,SJ7BrBnE,K,qBAAAA,M,KAIL,IAoCe6E,EApCsBC,IAAMC,MAAK,YAAgB,IAAdC,EAAa,EAAbA,QACxCvE,EAAmB,eACpBT,EAAkBiF,SAAW,IAWlC,OACI,cAAC,IAAD,CACIjE,SAVS,SAACC,EAAD,GAEV,IAF2CC,EAE5C,EAF4CA,cAG9C8D,EAAQ/D,GAERC,GAAc,IAMVC,cAAeV,EAFnB,SAKQ,gBAAEW,EAAF,EAAEA,aAAF,OACI,eAAC,IAAD,WACI,cAAC,IAAD,CAAOI,UAAW,WAAYF,KAAMtB,EAAkBiF,WACtD,cAAC,IAAD,CAAc3D,KAAMtB,EAAkBiF,SAAUzD,UAAU,QAE1D,8BACI,wBAAQ1B,KAAK,SAASgC,SAAUV,EAAhC,iC,0BK7Bf8D,EAAcJ,IAAMC,MAAK,SAACrG,GACnC,IAAM4F,EAAQa,YAAYC,KACpBjF,EAAUgF,YAAYE,KAEtBC,EAAWC,cAMXC,EAAY,YAAIlB,GACjBmB,UACA9D,KAAI,SAAAyC,GAAI,OACL,cAAC,EAAD,CACIjE,QAASA,EACT+D,QAASE,EAAKF,QACdC,MAAOC,EAAKD,OACPC,EAAK7E,OAIhBmB,EAAS,CACXgF,UAAW,CACP7C,QAAS,IAEbyB,MAAO,CACHqB,UAAW,IAInB,OACI,sBAAKtE,MAAOX,EAAOgF,UAAnB,UACI,0CACA,cAAC,EAAD,CAAaV,QA3BH,SAAC/D,GACfqE,EAAStC,IAAQgC,QAAQ/D,OA2BrB,qBAAKI,MAAOX,EAAO4D,MAAnB,SACKkB,UCfFI,EAbkB,SAAClH,GAC9B,OAAKA,EAAMyB,QAKP,qCACI,cAAC,EAAD,eAAiBzB,IACjB,cAACwG,EAAD,OANG,cAACW,EAAA,EAAD,K,iCCwBTC,E,4MAaFC,eAAiB,WAAO,IAAD,EAC0C,EAAKrH,MAA3DsH,EADY,EACZA,MAAOC,EADK,EACLA,cAAeC,EADV,EACUA,WAAYC,EADtB,EACsBA,iBAIrCC,GAAyBJ,EAAMK,OAAOD,OAE1C,IAAKA,KACDA,EAASH,GAGL,OAAO,cAAC,IAAD,CAAUrH,GAAI,WAI7BsH,EAAWE,GACXD,EAAiBC,I,kEA3BjBE,KAAKP,mB,yCAGUQ,EAAkBC,GACjBF,KAAK5H,MAAdsH,MAEGK,OAAOD,SAAWG,EAAUP,MAAMK,OAAOD,QAC/CE,KAAKP,mB,+BAuBH,IAAD,EACsFO,KAAK5H,MAAzFyB,EADF,EACEA,QAASnB,EADX,EACWA,oBAAqBD,EADhC,EACgCA,cAAeiH,EAD/C,EAC+CA,MAAOtD,EADtD,EACsDA,YAAaC,EADnE,EACmEA,gBAExE,OAAKxC,EAKD,cAAC,EAAD,CACIoC,SAAUyD,EAAMK,OAAOD,OACvBjG,QAASA,EACTnB,oBAAqBA,EACrBD,cAAeA,EACf2D,YAAaA,EACbC,gBAAiBA,IAVd,cAACkD,EAAA,EAAD,Q,GApCYf,IAAM2B,WA6DtBC,sBACXjI,aAVoB,SAACL,GACrB,MAAO,CACH+B,QAASkF,YAAcjH,GACvB6H,cAAeU,YAAavI,GAC5BW,cAAe6H,YAAoBxI,GACnCC,OAAQC,YAAaF,MAKA,CACrB8H,eACAC,qBACAnH,wBACA0D,gBACAC,sBAEJkE,IACAtI,IATWmI,CAUbZ","file":"static/js/5.e9ac8f10.chunk.js","sourcesContent":["import React from 'react';\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {connect} from \"react-redux\";\r\nimport {selectIsAuth} from \"../Redux/selectors/authSelectors\";\r\nimport {AppStateType} from \"../Redux/redux-store\";\r\n\r\nconst mapStateToProps = (state: AppStateType) => {\r\n    return {\r\n        isAuth: selectIsAuth(state),\r\n    }\r\n}\r\n\r\ntype StateToProps = {\r\n    isAuth: boolean\r\n}\r\n\r\nexport function withAuthRedirect<WCP>(WrappedComponent: React.ComponentType<WCP>) {\r\n    const RedirectComponent: React.FC<StateToProps> = (props) => {\r\n        const {isAuth, ...restProps} = props\r\n\r\n        if (!props.isAuth) {\r\n            return <Redirect to={'/login'}/>\r\n        }\r\n\r\n        return <WrappedComponent {...restProps as WCP} />\r\n    }\r\n\r\n    return connect<StateToProps, {}, WCP, AppStateType>(mapStateToProps)(RedirectComponent)\r\n}","import React, {CSSProperties} from \"react\";\r\nimport {EditProfileDataForm, ProfileType} from \"../../../../types/types\";\r\nimport {Field, Form, Formik} from \"formik\";\r\n\r\ntype Props = {\r\n    saveProfile: (formData: EditProfileDataForm) => void,\r\n    profile: ProfileType\r\n}\r\n\r\nenum ProfileDataFormFields {\r\n    fullName = 'fullName',\r\n    lookingForAJob = 'lookingForAJob',\r\n    lookingForAJobDescription = 'lookingForAJobDescription',\r\n    aboutMe = 'aboutMe'\r\n}\r\n\r\nexport const ProfileDataForm: React.FC<Props> = ({saveProfile, profile}) => {\r\n    const {fullName, lookingForAJob, lookingForAJobDescription, aboutMe, contacts} = profile;\r\n\r\n    const initialValuesOfForm = {\r\n        [ProfileDataFormFields.fullName]: fullName,\r\n        [ProfileDataFormFields.lookingForAJob]: lookingForAJob,\r\n        [ProfileDataFormFields.lookingForAJobDescription]: lookingForAJobDescription,\r\n        [ProfileDataFormFields.aboutMe]: aboutMe,\r\n        contacts: contacts\r\n    }\r\n\r\n    const onSubmit = (formData: EditProfileDataForm, {setSubmitting}: { setSubmitting: (isSubmitting: boolean) => void }) => {\r\n        saveProfile(formData)\r\n\r\n        setSubmitting(false)\r\n    }\r\n\r\n    const styles = {\r\n        span: {\r\n            fontWeight: 'bold'\r\n        } as CSSProperties,\r\n        grids: {\r\n            display: \"grid\",\r\n            width: 200\r\n        },\r\n        lookingForAJob: {\r\n            display: \"flex\"\r\n        }\r\n    }\r\n\r\n    return (\r\n        <Formik\r\n            onSubmit={onSubmit}\r\n            initialValues={initialValuesOfForm}\r\n        >\r\n            {\r\n                ({isSubmitting}) => (\r\n                    <Form style={styles.grids}>\r\n                        <div>\r\n                            <span style={styles.span}>Full name:</span>\r\n                            <Field\r\n                                name={ProfileDataFormFields.fullName}\r\n                                placeholder={'Full name'}\r\n                                type={'text'}\r\n                            />\r\n                        </div>\r\n                        <div>\r\n                            <span style={styles.span}>Looking for a job?</span>\r\n                            <Field\r\n                                style={styles.lookingForAJob}\r\n                                name={ProfileDataFormFields.lookingForAJob}\r\n                                type={'checkbox'}\r\n                            />\r\n                        </div>\r\n                        <div>\r\n                            <span style={styles.span}>My skills</span>\r\n                            <Field\r\n                                name={ProfileDataFormFields.lookingForAJobDescription}\r\n                                placeholder={'My skills'}\r\n                                component={'textarea'}\r\n                            />\r\n                        </div>\r\n                        <div>\r\n                            <span style={styles.span}>About me</span>\r\n                            <Field\r\n                                name={ProfileDataFormFields.aboutMe}\r\n                                placeholder={'About me'}\r\n                                component={'textarea'}\r\n                            />\r\n                        </div>\r\n                        <div>\r\n                            <b>Contacts</b>:\r\n                            {Object.keys(contacts).map(key => (\r\n                                <div key={key}>\r\n                                    <span style={styles.span}>{key}</span>\r\n                                    <Field\r\n                                        name={'contacts.' + key}\r\n                                        placeholder={key}\r\n                                        type={'text'}\r\n                                        initialValue={contacts[key]}\r\n                                    />\r\n                                </div>\r\n                            ))}\r\n                        </div>\r\n                        <div>\r\n                            <button type=\"submit\" disabled={isSubmitting}>\r\n                                Сохранить\r\n                            </button>\r\n                        </div>\r\n                    </Form>\r\n                )\r\n            }\r\n        </Formik>\r\n    )\r\n}\r\n","import React, {ChangeEvent, useEffect, useState} from 'react';\r\n\r\ntype Props = {\r\n    profileStatus: string\r\n    updateProfileStatus: (status: string) => void\r\n}\r\n\r\nconst ProfileStatus: React.FC<Props> = ({profileStatus, updateProfileStatus}) => {\r\n    const [editMode, setEditMode] = useState(false);\r\n    const [status, setStatus] = useState(profileStatus);\r\n\r\n    useEffect(() => {\r\n        setStatus(profileStatus)\r\n    }, [profileStatus])\r\n\r\n    const editModeOn = () => {\r\n        setEditMode(true)\r\n    }\r\n\r\n    const editModeOff = () => {\r\n        setEditMode(false)\r\n\r\n        updateProfileStatus(status);\r\n    }\r\n\r\n    const changeProfileStatus = (e: ChangeEvent<HTMLInputElement>) => {\r\n        const value = e.target.value;\r\n\r\n        setStatus(value);\r\n    }\r\n\r\n    return (\r\n        <>\r\n            {!editMode &&\r\n            <div>\r\n                <b>\r\n                    <span id={'profileStatus'} onDoubleClick={editModeOn}>\r\n                        {profileStatus || '----'}\r\n                    </span>\r\n                </b>\r\n            </div>\r\n            }\r\n            {editMode &&\r\n            <div>\r\n                <input\r\n                    onChange={changeProfileStatus}\r\n                    onBlur={editModeOff}\r\n                    value={status}\r\n                    type={'text'}\r\n                    autoFocus={true}\r\n                />\r\n            </div>\r\n            }\r\n        </>\r\n    )\r\n}\r\n\r\nexport default ProfileStatus;\r\n","import React from \"react\";\r\nimport {ErrorMessage, Field, Form, Formik} from \"formik\";\r\nimport {AddPostFormDataType} from \"../../../../types/types\";\r\n\r\ntype Props = {\r\n    addPost: (formData: AddPostFormDataType) => void\r\n}\r\n\r\nenum AddPostFormFields {\r\n    postText = 'postText'\r\n}\r\n\r\nconst AddPostForm: React.FC<Props> = React.memo(({addPost}) => {\r\n    const initialValuesOfForm = {\r\n        [AddPostFormFields.postText]: ''\r\n    }\r\n\r\n    const onSubmit = (formData: AddPostFormDataType, {setSubmitting}: {\r\n        setSubmitting: (isSubmitting: boolean) => void\r\n    }) => {\r\n        addPost(formData)\r\n\r\n        setSubmitting(false)\r\n    }\r\n\r\n    return (\r\n        <Formik\r\n            onSubmit={onSubmit}\r\n            initialValues={initialValuesOfForm}\r\n        >\r\n            {\r\n                ({isSubmitting}) => (\r\n                    <Form>\r\n                        <Field component={'textarea'} name={AddPostFormFields.postText}/>\r\n                        <ErrorMessage name={AddPostFormFields.postText} component=\"div\"/>\r\n\r\n                        <div>\r\n                            <button type=\"submit\" disabled={isSubmitting}>\r\n                                Add post\r\n                            </button>\r\n                        </div>\r\n                    </Form>\r\n                )\r\n            }\r\n        </Formik>\r\n    )\r\n})\r\n\r\nexport default AddPostForm","import React from \"react\";\r\n\r\ntype Props = {\r\n    contactTitle: string\r\n    contactValue: string\r\n}\r\n\r\nexport const Contact: React.FC<Props> = ({contactTitle, contactValue}) => {\r\n    const styles = {\r\n        wrapper: {\r\n            paddingLeft: 10\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div style={styles.wrapper}>\r\n            <b>{contactTitle}</b>: <a href={contactValue} target={'_blank'} rel={'noreferrer'}>{contactValue}</a>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react';\r\nimport {Contact} from \"../Contact/Contact\";\r\nimport {ProfileType} from \"../../../../types/types\";\r\n\r\ntype Props = {\r\n    profile: ProfileType\r\n    editModeOn: () => void\r\n    isOwner: boolean\r\n}\r\n\r\nconst ProfileData: React.FC<Props> = ({profile, editModeOn, isOwner}) => {\r\n    const {fullName, lookingForAJob, lookingForAJobDescription, aboutMe, contacts} = profile;\r\n\r\n    return (\r\n        <>\r\n            <div>\r\n                <b>Full name</b>: {fullName}\r\n            </div>\r\n            <div>\r\n                <b>Looking for a job</b>: {lookingForAJob ? 'yes' : 'no'}\r\n            </div>\r\n            {lookingForAJob &&\r\n            <div>\r\n                <b>My skills</b>: {lookingForAJobDescription}\r\n            </div>\r\n            }\r\n            <div>\r\n                <b>About me</b>: {aboutMe}\r\n            </div>\r\n            <div>\r\n                <b>Contacts</b>:\r\n                {Object.keys(contacts).map(key => {\r\n                    return <Contact key={key} contactTitle={key} contactValue={contacts[key]}/>\r\n                })}\r\n            </div>\r\n            {isOwner &&\r\n            <div>\r\n                <button onClick={editModeOn}>Edit user's data</button>\r\n            </div>\r\n            }\r\n        </>\r\n    )\r\n}\r\n\r\nexport default ProfileData;\r\n","import React, {FC, useState} from 'react'\r\nimport undefinedAva from '../../../media/user.png'\r\nimport ProfileStatus from \"./ProfileStatus/ProfileStatus\"\r\nimport {ProfileDataForm} from \"./ProfileData/ProfileDataForm\"\r\nimport ProfileData from \"./ProfileData/ProfileData\"\r\nimport {EditProfileDataForm, ProfileType} from \"../../../types/types\"\r\nimport {Avatar, Button, Card, Upload} from \"antd\"\r\nimport Meta from \"antd/es/card/Meta\"\r\nimport {CameraOutlined} from '@ant-design/icons'\r\nimport {RcCustomRequestOptions} from \"antd/es/upload/interface\";\r\n\r\ntype Props = {\r\n    profile: ProfileType\r\n    updateProfileStatus: (status: string) => void\r\n    profileStatus: string\r\n    isOwner: boolean\r\n    uploadPhoto: (photo: File) => void\r\n    saveProfileData: (formData: EditProfileDataForm) => any\r\n}\r\n\r\nconst ProfileInfo: FC<Props> = (props) => {\r\n    const {profile, updateProfileStatus, profileStatus, isOwner, uploadPhoto, saveProfileData} = props\r\n\r\n    const [editMode, setEditMode] = useState(false)\r\n\r\n    const onPhotoSelected = (file: RcCustomRequestOptions) => {\r\n        uploadPhoto(file.file)\r\n    }\r\n\r\n    const editModeOn = () => {\r\n        setEditMode(true)\r\n    }\r\n\r\n    const saveProfile = (formData: EditProfileDataForm) => {\r\n        // todo remove .then\r\n\r\n        saveProfileData(formData)\r\n            .then(() => {\r\n                setEditMode(false)\r\n            })\r\n    }\r\n\r\n    const styles = {\r\n        descriptionBlock: {\r\n            padding: 10\r\n        },\r\n        card: {\r\n            width: 250\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div style={styles.descriptionBlock}>\r\n            <Card\r\n                style={styles.card}\r\n                bordered={true}\r\n                actions={isOwner ? [\r\n                    <Upload\r\n                        listType={'picture'}\r\n                        showUploadList={false}\r\n                        type={\"select\"}\r\n                        multiple={false}\r\n                        accept={'.png,.jpeg,.jpg,.svg,.heic'}\r\n                        customRequest={onPhotoSelected}\r\n                    >\r\n                        <Button type={\"dashed\"} icon={<CameraOutlined/>}/>\r\n                    </Upload>\r\n                ] : []}\r\n            >\r\n                <Meta avatar={<Avatar size={200} src={profile.photos.large || undefinedAva}/>}\r\n                />\r\n            </Card>\r\n\r\n            {isOwner && editMode\r\n                ? <ProfileDataForm saveProfile={saveProfile} profile={profile}/>\r\n                : <ProfileData\r\n                    editModeOn={editModeOn}\r\n                    profile={profile}\r\n                    isOwner={isOwner}\r\n                />\r\n            }\r\n\r\n            <ProfileStatus profileStatus={profileStatus} updateProfileStatus={updateProfileStatus}/>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ProfileInfo;\r\n","import React from 'react';\r\nimport undefinedAva from \"../../../../media/user.png\";\r\nimport {ProfileType} from \"../../../../types/types\";\r\n\r\ntype Props = {\r\n    profile: ProfileType | null\r\n    message: string\r\n    likes: number\r\n}\r\n\r\nexport const Post: React.FC<Props> = ({profile, message, likes}) => {\r\n    const styles = {\r\n        item: {\r\n            color: 'black'\r\n        },\r\n        posts: {\r\n            color: 'green'\r\n        },\r\n        ava: {\r\n            width: 30,\r\n            height: 30,\r\n            borderRadius: 40\r\n        }\r\n    }\r\n\r\n    const getUserAvatar = () => {\r\n        return profile?.photos.small ?? undefinedAva\r\n    };\r\n\r\n    return (\r\n        <div style={styles.posts}>\r\n            <div style={styles.item}>\r\n                <img style={styles.ava} src={getUserAvatar()} alt={'ava'}/>\r\n                {message}\r\n            </div>\r\n            <div>\r\n                <span>\r\n                    like {likes}\r\n                </span>\r\n            </div>\r\n        </div>\r\n    );\r\n}","import React, {FC} from 'react';\r\nimport {Post} from \"./Post/Post\";\r\nimport {AddPostFormDataType} from \"../../../types/types\";\r\nimport AddPostForm from \"./AddPostForm/AddPostForm\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {selectPosts, selectProfile} from \"../../../Redux/selectors/profileSelectors\";\r\nimport {actions} from '../../../Redux/reducers/profileReducer';\r\n\r\nexport const MyPosts: FC = React.memo((props) => {\r\n    const posts = useSelector(selectPosts)\r\n    const profile = useSelector(selectProfile)\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const onAddPost = (formData: AddPostFormDataType) => {\r\n        dispatch(actions.addPost(formData))\r\n    }\r\n\r\n    const postsList = [...posts]\r\n        .reverse()\r\n        .map(item =>\r\n            <Post\r\n                profile={profile}\r\n                message={item.message}\r\n                likes={item.likes}\r\n                key={item.id}\r\n            />\r\n        )\r\n\r\n    const styles = {\r\n        postsBloc: {\r\n            padding: 10\r\n        },\r\n        posts: {\r\n            marginTop: 5\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div style={styles.postsBloc}>\r\n            <h3>my posts</h3>\r\n            <AddPostForm addPost={onAddPost}/>\r\n            <div style={styles.posts}>\r\n                {postsList}\r\n            </div>\r\n        </div>\r\n    );\r\n})\r\n","import React from 'react';\r\nimport ProfileInfo from \"./ProfileInfo/ProfileInfo\";\r\nimport {Preloader} from \"../common/Preloader/Preloader\";\r\nimport {EditProfileDataForm, ProfileType} from \"../../types/types\";\r\nimport {MyPosts} from \"./MyPosts/MyPosts\";\r\n\r\ntype Props = {\r\n    profile: ProfileType\r\n    updateProfileStatus: (status: string) => void\r\n    profileStatus: string\r\n    isOwner: boolean\r\n    uploadPhoto: (photo: File) => void\r\n    saveProfileData: (formData: EditProfileDataForm) => void\r\n}\r\n\r\nconst Profile: React.FC<Props> = (props) => {\r\n    if (!props.profile) {\r\n        return <Preloader/>\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <ProfileInfo {...props}/>\r\n            <MyPosts/>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Profile\r\n","import React from 'react';\r\nimport Profile from \"./Profile\";\r\nimport {connect} from \"react-redux\";\r\nimport {\r\n    getProfile,\r\n    getProfileStatus,\r\n    saveProfileData,\r\n    updateProfileStatus,\r\n    uploadPhoto\r\n} from \"../../Redux/reducers/profileReducer\";\r\nimport {Redirect, RouteComponentProps, withRouter} from \"react-router-dom\";\r\nimport {withAuthRedirect} from \"../../hoc/withAuthRedirect\";\r\nimport {compose} from \"redux\";\r\nimport {selectIsAuth, selectUserId} from \"../../Redux/selectors/authSelectors\";\r\nimport {selectProfile, selectProfileStatus} from \"../../Redux/selectors/profileSelectors\";\r\nimport {EditProfileDataForm, ProfileType} from \"../../types/types\";\r\nimport {AppStateType} from \"../../Redux/redux-store\";\r\nimport {Preloader} from \"../common/Preloader/Preloader\";\r\n\r\ntype StateToProps = {\r\n    currentUserId: number | null\r\n    profileStatus: string\r\n    profile: ProfileType | null\r\n    isAuth: boolean\r\n}\r\n\r\ntype DispatchToProps = {\r\n    getProfile: (userId: number) => void\r\n    getProfileStatus: (userId: number) => void\r\n    updateProfileStatus: (status: string) => void\r\n    uploadPhoto: (photo: File) => void\r\n    saveProfileData: (formData: EditProfileDataForm) => void\r\n}\r\n\r\ntype PathParams = {\r\n    userId: string\r\n}\r\ntype RouterMatch = RouteComponentProps<PathParams>\r\n\r\ntype Props = StateToProps & DispatchToProps & RouterMatch\r\n\r\nclass ProfileContainer extends React.Component<Props> {\r\n    componentDidMount() {\r\n        this.refreshProfile()\r\n    }\r\n\r\n    componentDidUpdate(prevProps: Props, prevState: StateToProps) {\r\n        const {match} = this.props;\r\n\r\n        if (match.params.userId !== prevProps.match.params.userId) {\r\n            this.refreshProfile();\r\n        }\r\n    }\r\n\r\n    refreshProfile = () => {\r\n        const {match, currentUserId, getProfile, getProfileStatus} = this.props;\r\n\r\n        // псевдоистина - в данном случае userId: string, если поставить перед значением +, то конвертирует в число\r\n        // например: а='1';  +a // 1\r\n        let userId: number | null = +match.params.userId;\r\n\r\n        if (!userId) {\r\n            userId = currentUserId;\r\n\r\n            if (!userId) {\r\n                return <Redirect to={'/login'}/>\r\n            }\r\n        }\r\n\r\n        getProfile(userId);\r\n        getProfileStatus(userId);\r\n    }\r\n\r\n    render() {\r\n        const {profile, updateProfileStatus, profileStatus, match, uploadPhoto, saveProfileData} = this.props;\r\n\r\n        if (!profile) {\r\n            return <Preloader/>\r\n        }\r\n\r\n        return (\r\n            <Profile\r\n                isOwner={!match.params.userId}\r\n                profile={profile}\r\n                updateProfileStatus={updateProfileStatus}\r\n                profileStatus={profileStatus}\r\n                uploadPhoto={uploadPhoto}\r\n                saveProfileData={saveProfileData}\r\n            />\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType): StateToProps => {\r\n    return {\r\n        profile: selectProfile(state),\r\n        currentUserId: selectUserId(state),\r\n        profileStatus: selectProfileStatus(state),\r\n        isAuth: selectIsAuth(state),\r\n    }\r\n}\r\n\r\nexport default compose<React.ComponentType>(\r\n    connect(mapStateToProps, {\r\n        getProfile,\r\n        getProfileStatus,\r\n        updateProfileStatus,\r\n        uploadPhoto,\r\n        saveProfileData\r\n    }),\r\n    withRouter,\r\n    withAuthRedirect\r\n)(ProfileContainer);\r\n"],"sourceRoot":""}