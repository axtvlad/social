{"version":3,"sources":["components/Profile/ProfileInfo/ProfileInfo.module.css","components/Profile/ProfileInfo/ProfileData/ProfileDataForm.module.css","components/Profile/ProfileInfo/Contact/Contact.module.css","components/Profile/MyPosts/Post/Post.module.css","components/Profile/MyPosts/MyPosts.module.css","components/Profile/ProfileInfo/ProfileData/ProfileDataForm.tsx","components/Profile/ProfileInfo/ProfileStatus/ProfileStatus.tsx","components/Profile/MyPosts/AddPostForm/AddPostForm.tsx","components/Profile/ProfileInfo/Contact/Contact.tsx","components/Profile/ProfileInfo/ProfileData/ProfileData.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","components/Profile/MyPosts/Post/Post.tsx","components/Profile/MyPosts/MyPosts.tsx","Redux/selectors/profileSelectors.ts","components/Profile/MyPosts/MyPostsContainer.tsx","components/Profile/Profile.tsx","components/Profile/ProfileContainer.tsx","media/user.png","../node_modules/@babel/runtime/helpers/esm/slicedToArray.js","../node_modules/@babel/runtime/helpers/esm/arrayWithHoles.js","../node_modules/@babel/runtime/helpers/esm/iterableToArrayLimit.js","../node_modules/@babel/runtime/helpers/esm/nonIterableRest.js","hoc/withAuthRedirect.tsx"],"names":["module","exports","ProfileDataFormFields","ProfileStatus","profileStatus","updateProfileStatus","useState","editMode","setEditMode","status","setStatus","useEffect","id","onDoubleClick","onChange","e","value","target","onBlur","type","autoFocus","AddPostFormFields","ProfileDataForm","onSubmit","profile","fullName","lookingForAJob","lookingForAJobDescription","aboutMe","contacts","props","handleSubmit","name","className","classes","gridFields","span","placeholder","component","validate","required","initialValue","checkbox","Object","keys","map","key","Contact","contactTitle","contactValue","contact","href","rel","ProfileData","editModeOn","isOwner","onClick","ProfileInfo","uploadPhoto","saveProfileData","descriptionBloc","src","photos","large","undefinedAva","alt","avatar","files","formData","then","Post","message","likes","posts","item","ava","small","AddPostForm","Textarea","postText","composeValidators","maxLength","MyPosts","React","memo","addPost","postsList","reverse","postsBloc","getProfileSelector","state","profilePage","getProfileStatusSelector","getPostsSelector","MyPostsContainer","this","Component","connect","actions","Profile","Preloader","ProfileContainer","refreshProfile","match","currentUserId","getProfile","getProfileStatus","userId","params","to","prevProps","prevState","compose","getUserIdSelector","isAuth","getIsAuthSelector","withRouter","withAuthRedirect","_slicedToArray","arr","i","Array","isArray","Symbol","iterator","_arr","_n","_d","_e","undefined","_s","_i","next","done","push","length","err","unsupportedIterableToArray","TypeError","mapStateToProps","WrappedComponent","restProps"],"mappings":"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","file":"static/js/4.c5f6686d.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"pic\":\"ProfileInfo_pic__1mRKR\",\"descriptionBloc\":\"ProfileInfo_descriptionBloc__3Wn3N\",\"avatar\":\"ProfileInfo_avatar__3xuFq\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"gridFields\":\"ProfileDataForm_gridFields__1mXzU\",\"checkbox\":\"ProfileDataForm_checkbox__2pU65\",\"span\":\"ProfileDataForm_span__1MELd\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"contact\":\"Contact_contact__-jpbO\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Post_item__ihtu9\",\"posts\":\"Post_posts__144VX\",\"ava\":\"Post_ava__2EGbS\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"postsBloc\":\"MyPosts_postsBloc__Naxu4\",\"posts\":\"MyPosts_posts__3tZ1c\"};","import {Field, Form} from \"react-final-form\";\nimport {required} from \"../../../../utils/validators/validators\";\nimport React from \"react\";\nimport classes from './ProfileDataForm.module.css'\nimport {ProfileType} from \"../../../../types/types\";\n\ntype Props = {\n    onSubmit: (formData: ProfileType) => void,\n    profile: ProfileType\n}\n\nenum ProfileDataFormFields {\n    fullName = 'fullName',\n    lookingForAJob = 'lookingForAJob',\n    lookingForAJobDescription = 'lookingForAJobDescription',\n    aboutMe = 'aboutMe',\n}\n\nconst ProfileDataForm: React.FC<Props> = ({onSubmit, profile}) => {\n    const {fullName, lookingForAJob, lookingForAJobDescription, aboutMe, contacts} = profile;\n\n    return (\n        <Form onSubmit={onSubmit}>\n            {(props) => {\n                return (\n                    <form onSubmit={props.handleSubmit} name={'ProfileDataForm'} className={classes.gridFields}>\n                        <div>\n                            <span className={classes.span}>Full name:</span>\n                            <Field\n                                name={ProfileDataFormFields.fullName}\n                                placeholder={'Full name'}\n                                type={'text'}\n                                component={'input'}\n                                validate={required}\n                                initialValue={fullName}\n                            />\n                        </div>\n                        <div className={classes.checkbox}>\n                            <span className={classes.span}>Looking for a job?</span>\n                            <Field\n                                name={ProfileDataFormFields.lookingForAJob}\n                                placeholder={'Looking for a job?'}\n                                type={'checkbox'}\n                                component={'input'}\n                                initialValue={lookingForAJob}\n                            />\n                        </div>\n                        <div>\n                            <span className={classes.span}>My skills</span>\n                            <Field\n                                name={ProfileDataFormFields.lookingForAJobDescription}\n                                placeholder={'My skills'}\n                                component={'textarea'}\n                                validate={required}\n                                initialValue={lookingForAJobDescription}\n                            />\n                        </div>\n                        <div>\n                            <span className={classes.span}>About me</span>\n                            <Field\n                                name={ProfileDataFormFields.aboutMe}\n                                placeholder={'About me'}\n                                component={'textarea'}\n                                validate={required}\n                                initialValue={aboutMe}\n                            />\n                        </div>\n                        <div>\n                            <b>Contacts</b>:\n                            {Object.keys(contacts).map(key => {\n                                return (\n                                    <div key={key}>\n                                        <span className={classes.span}>{key}</span>\n                                        <Field\n                                            name={'contacts.' + key}\n                                            placeholder={key}\n                                            type={'text'}\n                                            component={'input'}\n                                            initialValue={contacts[key]}\n                                        />\n                                    </div>\n                                )\n                            })}\n                        </div>\n                        <div>\n                            <button>Сохранить</button>\n                        </div>\n                    </form>\n                )\n            }}\n        </Form>\n    )\n}\n\nexport default ProfileDataForm;","import React, {ChangeEvent, useEffect, useState} from 'react';\n\ntype Props = {\n    profileStatus: string\n    updateProfileStatus: (status: string) => void\n}\n\nconst ProfileStatus: React.FC<Props> = ({profileStatus, updateProfileStatus}) => {\n    const [editMode, setEditMode] = useState(false);\n    const [status, setStatus] = useState(profileStatus);\n\n    useEffect(() => {\n        setStatus(profileStatus)\n    }, [profileStatus])\n\n    const editModeOn = () => {\n        setEditMode(true)\n    }\n\n    const editModeOff = () => {\n        setEditMode(false)\n\n        updateProfileStatus(status);\n    }\n\n    const changeProfileStatus = (e: ChangeEvent<HTMLInputElement>) => {\n        const value = e.target.value;\n\n        setStatus(value);\n    }\n\n    return (\n        <div>\n            {!editMode &&\n            <div>\n                <b>\n                    <span id={'profileStatus'} onDoubleClick={editModeOn}>\n                        {profileStatus || '----'}\n                    </span>\n                </b>\n            </div>\n            }\n            {editMode &&\n            <div>\n                <input\n                    onChange={changeProfileStatus}\n                    onBlur={editModeOff}\n                    value={status}\n                    type={'text'}\n                    autoFocus={true}\n                />\n            </div>\n            }\n        </div>\n    )\n}\n\nexport default ProfileStatus;\n","import React from \"react\";\nimport {Field, Form} from \"react-final-form\";\nimport {Textarea} from \"../../../common/FormsControls/FormsControls\";\nimport {composeValidators, maxLength, required} from \"../../../../utils/validators/validators\";\n\ntype Props = {\n    onSubmit: (formData: AddPostFormType) => void\n}\n\ntype AddPostFormType = {\n    postText: string\n}\n\nenum AddPostFormFields {\n    postText = 'postText'\n}\n\nconst AddPostForm: React.FC<Props> = ({onSubmit}) => {\n    return (\n        <Form onSubmit={onSubmit}>\n            {(props) => {\n                return (\n                    <form onSubmit={props.handleSubmit} name={'AddPostForm'}>\n                        <div>\n                            <Field\n                                component={Textarea}\n                                name={AddPostFormFields.postText}\n                                validate={composeValidators(required, maxLength(300))}\n                                placeholder={'post msg'}\n                            />\n                        </div>\n                        <div>\n                            <button>\n                                Add post\n                            </button>\n                        </div>\n                    </form>\n                )\n            }}\n        </Form>\n    )\n}\n\nexport default AddPostForm","import classes from \"./Contact.module.css\";\nimport React from \"react\";\n\ntype Props = {\n    contactTitle: string\n    contactValue: string\n}\n\nconst Contact: React.FC<Props> = ({contactTitle, contactValue}) => {\n    return (\n        <div className={classes.contact}>\n            <b>{contactTitle}</b>: <a href={contactValue} target={'_blank'} rel={'noreferrer'}>{contactValue}</a>\n        </div>\n    )\n}\n\nexport default Contact;","import React from 'react';\nimport Contact from \"../Contact/Contact\";\nimport {ProfileType} from \"../../../../types/types\";\n\ntype Props = {\n    profile: ProfileType\n    editModeOn: () => void\n    isOwner: boolean\n}\n\nconst ProfileData: React.FC<Props> = ({profile, editModeOn, isOwner}) => {\n    const {fullName, lookingForAJob, lookingForAJobDescription, aboutMe, contacts} = profile;\n\n    return (\n        <div>\n            <div>\n                <b>Full name</b>: {fullName}\n            </div>\n            <div>\n                <b>Looking for a job</b>: {lookingForAJob ? 'yes' : 'no'}\n            </div>\n            {lookingForAJob &&\n            <div>\n                <b>My skills</b>: {lookingForAJobDescription}\n            </div>\n            }\n            <div>\n                <b>About me</b>: {aboutMe}\n            </div>\n            <div>\n                <b>Contacts</b>:\n                {Object.keys(contacts).map(key => {\n                    return <Contact key={key} contactTitle={key} contactValue={contacts[key]}/>\n                })}\n            </div>\n            {isOwner &&\n            <div>\n                <button onClick={editModeOn}>Edit user's data</button>\n            </div>\n            }\n        </div>\n    )\n}\n\nexport default ProfileData;\n","import React, {ChangeEvent, useState} from 'react';\nimport classes from './ProfileInfo.module.css';\nimport undefinedAva from '../../../media/user.png'\nimport ProfileStatus from \"./ProfileStatus/ProfileStatus\";\nimport ProfileDataForm from \"./ProfileData/ProfileDataForm\";\nimport ProfileData from \"./ProfileData/ProfileData\";\nimport {ProfileType} from \"../../../types/types\";\n\ntype Props = {\n    profile: ProfileType\n    updateProfileStatus: (status: string) => void\n    profileStatus: string\n    isOwner: boolean\n    uploadPhoto: (photo: File) => void\n    saveProfileData: (formData: ProfileType) => any\n}\n\nconst ProfileInfo: React.FC<Props> = ({profile, updateProfileStatus, profileStatus, isOwner, uploadPhoto, saveProfileData}) => {\n    const [editMode, setEditMode] = useState(false);\n\n    const onPhotoSelected = (e: ChangeEvent<HTMLInputElement>) => {\n        const files = e.target.files;\n\n        if (files) {\n            uploadPhoto(files[0]);\n        }\n    }\n\n    const editModeOn = () => {\n        setEditMode(true);\n    }\n\n    const onSubmit = (formData: ProfileType) => {\n        // todo remove .then\n        saveProfileData(formData)\n            .then(() => {\n                setEditMode(false);\n            })\n    }\n\n    return (\n        <div>\n            <div className={classes.descriptionBloc}>\n                <img src={profile.photos.large || undefinedAva} alt=\"avatar\" className={classes.avatar}/>\n\n                {isOwner && <input type={'file'} onChange={onPhotoSelected}/>}\n\n                {isOwner && editMode\n                    ? <ProfileDataForm onSubmit={onSubmit} profile={profile}/>\n                    : <ProfileData\n                        editModeOn={editModeOn}\n                        profile={profile}\n                        isOwner={isOwner}\n                    />\n                }\n\n                <ProfileStatus profileStatus={profileStatus} updateProfileStatus={updateProfileStatus}/>\n            </div>\n        </div>\n    );\n}\n\nexport default ProfileInfo;\n","import React from 'react';\nimport classes from './Post.module.css';\nimport undefinedAva from \"../../../../media/user.png\";\nimport {ProfileType} from \"../../../../types/types\";\n\ntype Props = {\n    profile: ProfileType | null\n    message: string\n    likes: number\n}\n\nconst Post: React.FC<Props> = ({profile, message, likes}) => {\n    const getUserAvatar = () => {\n        if (profile && profile.photos.small) {\n            return profile.photos.small;\n        } else {\n            return undefinedAva;\n        }\n    };\n\n    return (\n        <div className={classes.posts}>\n            <div className={classes.item}>\n                <img className={classes.ava} src={getUserAvatar()} alt={'ava'}/>\n                {message}\n            </div>\n            <div>\n                <span>\n                    like {likes}\n                </span>\n            </div>\n        </div>\n    );\n}\n\nexport default Post;\n","import React from 'react';\nimport Post from \"./Post/Post\";\nimport classes from './MyPosts.module.css'\nimport {PostType, ProfileType} from \"../../../types/types\";\nimport AddPostForm from \"./AddPostForm/AddPostForm\";\n\ntype Props = {\n    posts: Array<PostType>\n    profile: ProfileType | null\n\n    addPost: (postMessage: string) => void\n}\n\ntype AddPostFormType = {\n    postText: string\n}\n\nconst MyPosts: React.FC<Props> = React.memo(({posts, profile, addPost}) => {\n    const postsList = [...posts]\n        .reverse()\n        .map(item =>\n            <Post\n                profile={profile}\n                message={item.message}\n                likes={item.likes}\n                key={item.id}\n            />\n        )\n\n    const addNewPost = ({postText}: AddPostFormType) => {\n        addPost(postText);\n    }\n\n    return (\n        <div className={classes.postsBloc}>\n            <h3>my posts</h3>\n            <AddPostForm onSubmit={addNewPost}/>\n            <div className={classes.posts}>\n                {postsList}\n            </div>\n        </div>\n    );\n})\n\nexport default MyPosts\n","import {AppStateType} from \"../redux-store\";\n\nexport const getProfileSelector = (state: AppStateType) => {\n    return state.profilePage.profile;\n}\n\nexport const getProfileStatusSelector = (state: AppStateType) => {\n    return state.profilePage.profileStatus;\n}\n\nexport const getPostsSelector = (state: AppStateType) => {\n    return state.profilePage.posts;\n}","import {actions} from \"../../../Redux/reducers/profileReducer\";\nimport MyPosts from \"./MyPosts\";\nimport {connect} from \"react-redux\";\nimport {getPostsSelector, getProfileSelector} from \"../../../Redux/selectors/profileSelectors\";\nimport React from \"react\";\nimport {PostType, ProfileType} from \"../../../types/types\";\nimport {AppStateType} from \"../../../Redux/redux-store\";\n\ntype StateToProps = {\n    posts: Array<PostType>\n    profile: ProfileType | null\n}\n\ntype DispatchToProps = {\n    addPost: (postText: string) => void\n}\n\ntype Props = StateToProps & DispatchToProps\n\nclass MyPostsContainer extends React.Component<Props> {\n    render() {\n        const {posts, addPost, profile} = this.props;\n\n        return (\n            <MyPosts posts={posts} addPost={addPost} profile={profile}/>\n        )\n    }\n}\n\nconst mapStateToProps = (state: AppStateType): StateToProps => {\n    return {\n        posts: getPostsSelector(state),\n        profile: getProfileSelector(state)\n    }\n};\n\nexport default connect<StateToProps, DispatchToProps, {}, AppStateType>(mapStateToProps, {\n    addPost: postText => actions.addPost(postText),\n})(MyPostsContainer);\n","import React from 'react';\nimport ProfileInfo from \"./ProfileInfo/ProfileInfo\";\nimport MyPostsContainer from \"./MyPosts/MyPostsContainer\";\nimport Preloader from \"../common/Preloader/Preloader\";\nimport {ProfileType} from \"../../types/types\";\n\ntype Props = {\n    profile: ProfileType\n    updateProfileStatus: (status: string) => void\n    profileStatus: string\n    isOwner: boolean\n    uploadPhoto: () => void\n    saveProfileData: () => void\n}\n\nconst Profile: React.FC<Props> = (props) => {\n    if (!props.profile) {\n        return <Preloader/>\n    }\n\n    return (\n        <div>\n            <ProfileInfo {...props}/>\n            <MyPostsContainer/>\n        </div>\n    );\n}\n\nexport default Profile;\n","import React from 'react';\nimport Profile from \"./Profile\";\nimport {connect} from \"react-redux\";\nimport {\n    getProfile,\n    getProfileStatus,\n    saveProfileData,\n    updateProfileStatus,\n    uploadPhoto\n} from \"../../Redux/reducers/profileReducer\";\nimport {Redirect, RouteComponentProps, withRouter} from \"react-router-dom\";\nimport {withAuthRedirect} from \"../../hoc/withAuthRedirect\";\nimport {compose} from \"redux\";\nimport {getIsAuthSelector, getUserIdSelector} from \"../../Redux/selectors/authSelectors\";\nimport {getProfileSelector, getProfileStatusSelector} from \"../../Redux/selectors/profileSelectors\";\nimport {ProfileType} from \"../../types/types\";\nimport {AppStateType} from \"../../Redux/redux-store\";\nimport Preloader from \"../common/Preloader/Preloader\";\n\ntype StateToProps = {\n    currentUserId: number | null\n    profileStatus: string\n    profile: ProfileType | null\n    isAuth: boolean\n}\n\ntype DispatchToProps = {\n    getProfile: (userId: number) => void\n    getProfileStatus: (userId: number) => void\n    updateProfileStatus: (status: string) => void\n    uploadPhoto: () => void\n    saveProfileData: () => void\n}\n\ntype PathParams = {\n    userId: string\n}\ntype RouterMatch = RouteComponentProps<PathParams>\n\ntype Props = StateToProps & DispatchToProps & RouterMatch\n\nclass ProfileContainer extends React.Component<Props> {\n    componentDidMount() {\n        this.refreshProfile()\n    }\n\n    componentDidUpdate(prevProps: Props, prevState: StateToProps) {\n        const {match} = this.props;\n\n        if (match.params.userId !== prevProps.match.params.userId) {\n            this.refreshProfile();\n        }\n    }\n\n    refreshProfile = () => {\n        const {match, currentUserId, getProfile, getProfileStatus} = this.props;\n\n        // псевдоистина - в данном случае userId: string, если поставить перед значением +, то конвертирует в число\n        // например: а='1';  +a // 1\n        let userId: number | null = +match.params.userId;\n\n        if (!userId) {\n            userId = currentUserId;\n\n            if (!userId) {\n                return <Redirect to={'/login'}/>\n            }\n        }\n\n        getProfile(userId);\n        getProfileStatus(userId);\n    }\n\n    render() {\n        const {profile, updateProfileStatus, profileStatus, match, uploadPhoto, saveProfileData} = this.props;\n\n        if (!profile) {\n            return <Preloader/>\n        }\n\n        return (\n            <Profile\n                isOwner={!match.params.userId}\n                profile={profile}\n                updateProfileStatus={updateProfileStatus}\n                profileStatus={profileStatus}\n                uploadPhoto={uploadPhoto}\n                saveProfileData={saveProfileData}\n            />\n        );\n    }\n}\n\nconst mapStateToProps = (state: AppStateType): StateToProps => {\n    return {\n        profile: getProfileSelector(state),\n        currentUserId: getUserIdSelector(state),\n        profileStatus: getProfileStatusSelector(state),\n        isAuth: getIsAuthSelector(state),\n    }\n}\n\nexport default compose<React.ComponentType>(\n    connect(mapStateToProps, {\n        getProfile,\n        getProfileStatus,\n        updateProfileStatus,\n        uploadPhoto,\n        saveProfileData\n    }),\n    withRouter,\n    withAuthRedirect\n)(ProfileContainer);\n","export default __webpack_public_path__ + \"static/media/user.8d49e377.png\";","import arrayWithHoles from \"@babel/runtime/helpers/esm/arrayWithHoles\";\nimport iterableToArrayLimit from \"@babel/runtime/helpers/esm/iterableToArrayLimit\";\nimport unsupportedIterableToArray from \"@babel/runtime/helpers/esm/unsupportedIterableToArray\";\nimport nonIterableRest from \"@babel/runtime/helpers/esm/nonIterableRest\";\nexport default function _slicedToArray(arr, i) {\n  return arrayWithHoles(arr) || iterableToArrayLimit(arr, i) || unsupportedIterableToArray(arr, i) || nonIterableRest();\n}","export default function _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}","export default function _iterableToArrayLimit(arr, i) {\n  if (typeof Symbol === \"undefined\" || !(Symbol.iterator in Object(arr))) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}","export default function _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}","import React from 'react';\nimport {Redirect} from \"react-router-dom\";\nimport {connect} from \"react-redux\";\nimport {getIsAuthSelector} from \"../Redux/selectors/authSelectors\";\nimport {AppStateType} from \"../Redux/redux-store\";\n\nconst mapStateToProps = (state: AppStateType) => {\n    return {\n        isAuth: getIsAuthSelector(state),\n    }\n}\n\ntype StateToProps = {\n    isAuth: boolean\n}\n\nexport function withAuthRedirect<WCP>(WrappedComponent: React.ComponentType<WCP>) {\n    const RedirectComponent: React.FC<StateToProps> = (props) => {\n        const {isAuth, ...restProps} = props\n\n        if (!props.isAuth) {\n            return <Redirect to={'/login'}/>\n        }\n\n        return <WrappedComponent {...restProps as WCP} />\n    }\n\n    return connect<StateToProps, {}, WCP, AppStateType>(mapStateToProps)(RedirectComponent)\n}"],"sourceRoot":""}