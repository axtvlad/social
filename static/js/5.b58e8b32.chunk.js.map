{"version":3,"sources":["components/Dialogs/Dialogs.module.css","components/Dialogs/DialogItem/DialogItem.module.css","components/Dialogs/Message/Message.module.css","components/Dialogs/AddMessageForm/AddMessageForm.tsx","components/Dialogs/DialogItem/DialogItem.tsx","components/Dialogs/Message/Message.tsx","components/Dialogs/Dialogs.tsx","Redux/selectors/dialogsSelectors.ts","components/Dialogs/DialogsContainer.tsx","hoc/withAuthRedirect.tsx"],"names":["module","exports","AddMessageFormFields","DialogItem","id","name","className","classes","dialog","active","to","activeClassName","Message","message","AddMessageForm","onSubmit","props","handleSubmit","messageText","component","Textarea","placeholder","validate","composeValidators","required","maxLength","Dialogs","messages","sendMessage","dialogs","messagesList","map","item","dialogsList","dialogsItems","formData","getDialogs","state","dialogsPage","getMessages","DialogsContainer","this","React","Component","compose","connect","actions","withAuthRedirect","mapStateToProps","isAuth","getIsAuthSelector","WrappedComponent","restProps"],"mappings":"qFACAA,EAAOC,QAAU,CAAC,QAAU,yBAAyB,gBAAgB,+BAA+B,OAAS,wBAAwB,OAAS,wBAAwB,SAAW,4B,oBCAjLD,EAAOC,QAAU,CAAC,QAAU,4BAA4B,OAAS,2BAA2B,OAAS,6B,oBCArGD,EAAOC,QAAU,CAAC,QAAU,2B,4CCYvBC,E,2GCMUC,EAVqB,SAAC,GAAgB,IAAfC,EAAc,EAAdA,GAAIC,EAAU,EAAVA,KAGtC,OACI,qBAAKC,UAAS,UAAKC,IAAQC,OAAb,YAAuBD,IAAQE,QAA7C,SACI,cAAC,IAAD,CAASC,GAJJ,YAIeN,EAAIO,gBAAiBJ,IAAQE,OAAjD,SAA0DJ,O,kBCCvDO,EARkB,SAAC,GAAe,IAAdC,EAAa,EAAbA,QAC/B,OACI,qBAAKP,UAAWC,IAAQM,QAAxB,SACKA,K,kCFGRX,K,2BAAAA,M,KAIL,IA0BeY,EA1B0B,SAAC,GAAgB,IAAfC,EAAc,EAAdA,SACvC,OACI,cAAC,IAAD,CAAMA,SAAUA,EAAhB,SACK,SAACC,GACE,OACI,uBAAMD,SAAUC,EAAMC,aAAcZ,KAAM,iBAA1C,UACI,8BACI,cAAC,IAAD,CACIA,KAAMH,EAAqBgB,YAC3BC,UAAWC,IACXC,YAAa,eACbC,SAAUC,YAAkBC,IAAUC,YAAU,UAGxD,8BACI,mDGmBbC,EAjCkB,SAAC,GAAsC,IAArCC,EAAoC,EAApCA,SAAUC,EAA0B,EAA1BA,YAAaC,EAAa,EAAbA,QAChDC,EAAeH,EAASI,KAAI,SAAAC,GAAI,OAClC,cAAC,EAAD,CAEInB,QAASmB,EAAKnB,SADTmB,EAAK5B,OAKZ6B,EAAcJ,EAAQE,KAAI,SAAAC,GAAI,OAChC,cAAC,EAAD,CAEI3B,KAAM2B,EAAK3B,KACXD,GAAI4B,EAAK5B,IAFJ4B,EAAK5B,OAUlB,OACI,sBAAKE,UAAWC,IAAQsB,QAAxB,UACI,qBAAKvB,UAAWC,IAAQ2B,aAAxB,SACKD,IAEL,sBAAK3B,UAAWC,IAAQoB,SAAxB,UACKG,EACD,cAAC,EAAD,CAAgBf,SAXL,SAACoB,GACpBP,EAAYO,EAASjB,uB,gBCjChBkB,EAAa,SAACC,GACvB,OAAOA,EAAMC,YAAYT,SAGhBU,EAAc,SAACF,GACxB,OAAOA,EAAMC,YAAYX,U,QCcvBa,E,uKACQ,IAAD,EACoCC,KAAKzB,MAAvCW,EADF,EACEA,SAAUE,EADZ,EACYA,QAASD,EADrB,EACqBA,YAE1B,OACI,cAAC,EAAD,CAASD,SAAUA,EAAUE,QAASA,EAASD,YAAaA,Q,GALzCc,IAAMC,WAiBtBC,sBACXC,aARoB,SAACR,GACrB,MAAO,CACHR,QAASO,EAAWC,GACpBV,SAAUY,EAAYF,MAKgD,CACtET,YAAakB,IAAQlB,cAEzBmB,IAJWH,CAKbJ,I,0HCrCIQ,EAAkB,SAACX,GACrB,MAAO,CACHY,OAAQC,YAAkBb,KAQ3B,SAASU,EAAsBI,GAWlC,OAAON,YAA6CG,EAA7CH,EAV2C,SAAC7B,GAChBA,EAAxBiC,OADmD,IACxCG,EADuC,YAC1BpC,EAD0B,YAGzD,OAAKA,EAAMiC,OAIJ,cAACE,EAAD,eAAsBC,IAHlB,cAAC,IAAD,CAAU1C,GAAI","file":"static/js/5.b58e8b32.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__2xRSA\",\"dialogs-items\":\"Dialogs_dialogs-items__11igu\",\"dialog\":\"Dialogs_dialog__lk_cw\",\"active\":\"Dialogs_active__2sQhs\",\"messages\":\"Dialogs_messages__1w_Up\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"DialogItem_dialogs__3-Pix\",\"dialog\":\"DialogItem_dialog__3tDA2\",\"active\":\"DialogItem_active__2qnc5\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"message\":\"Message_message__1MOXo\"};","import {Field, Form} from \"react-final-form\";\nimport {Textarea} from \"../../common/FormsControls/FormsControls\";\nimport {composeValidators, maxLength, required} from \"../../../utils/validators/validators\";\nimport React from \"react\";\n\ntype Props = {\n    onSubmit: (formData: FormDataType) => void\n}\n\ntype FormDataType = {\n    messageText: string\n}\n\nenum AddMessageFormFields {\n    messageText = 'messageText'\n}\n\nconst  AddMessageForm: React.FC<Props> = ({onSubmit}) => {\n    return (\n        <Form onSubmit={onSubmit}>\n            {(props) => {\n                return (\n                    <form onSubmit={props.handleSubmit} name={'AddMessageForm'}>\n                        <div>\n                            <Field\n                                name={AddMessageFormFields.messageText}\n                                component={Textarea}\n                                placeholder={'Enter ur msg'}\n                                validate={composeValidators(required, maxLength(100))}\n                            />\n                        </div>\n                        <div>\n                            <button>\n                                Send\n                            </button>\n                        </div>\n                    </form>\n                )\n            }}\n        </Form>\n    )\n}\n\nexport default AddMessageForm\n","import React from 'react';\nimport classes from './DialogItem.module.css'\nimport {NavLink} from \"react-router-dom\";\n\ntype Props = {\n    id: number\n    name: string\n}\n\nconst DialogItem: React.FC<Props> = ({id, name}) => {\n    const path = '/dialogs/';\n\n    return (\n        <div className={`${classes.dialog} ${classes.active}`}>\n            <NavLink to={path + id} activeClassName={classes.active}>{name}</NavLink>\n        </div>\n    )\n}\n\nexport default DialogItem;","import React from 'react';\nimport classes from './Message.module.css'\n\ntype Props = {\n    message: string\n}\n\nconst Message: React.FC<Props> = ({message}) => {\n    return (\n        <div className={classes.message}>\n            {message}\n        </div>\n    )\n}\n\nexport default Message;","import React from 'react';\nimport classes from './Dialogs.module.css'\nimport DialogItem from \"./DialogItem/DialogItem\";\nimport Message from \"./Message/Message\";\nimport {DialogType, MessageType} from \"../../types/types\";\nimport AddMessageForm from \"./AddMessageForm/AddMessageForm\";\n\ntype Props = {\n    messages: Array<MessageType>\n    dialogs: Array<DialogType>\n\n    sendMessage: (messageText: string) => void\n}\n\ntype FormDataType = {\n    messageText: string\n}\n\nconst Dialogs: React.FC<Props> = ({messages, sendMessage, dialogs}) => {\n    const messagesList = messages.map(item =>\n        <Message\n            key={item.id}\n            message={item.message}\n        />\n    );\n\n    const dialogsList = dialogs.map(item =>\n        <DialogItem\n            key={item.id}\n            name={item.name}\n            id={item.id}\n        />\n    );\n\n    const sendNewMessage = (formData: FormDataType) => {\n        sendMessage(formData.messageText);\n    }\n\n    return (\n        <div className={classes.dialogs}>\n            <div className={classes.dialogsItems}>\n                {dialogsList}\n            </div>\n            <div className={classes.messages}>\n                {messagesList}\n                <AddMessageForm onSubmit={sendNewMessage}/>\n            </div>\n        </div>\n    )\n}\n\nexport default Dialogs;","import {AppStateType} from \"../redux-store\";\n\nexport const getDialogs = (state: AppStateType) => {\n    return state.dialogsPage.dialogs;\n}\n\nexport const getMessages = (state: AppStateType) => {\n    return state.dialogsPage.messages;\n}","import {actions} from \"../../Redux/reducers/dialogsReducer\";\nimport Dialogs from \"./Dialogs\";\nimport {connect} from \"react-redux\";\nimport {compose} from \"redux\";\nimport {getDialogs, getMessages} from \"../../Redux/selectors/dialogsSelectors\";\nimport {AppStateType} from \"../../Redux/redux-store\";\nimport {DialogType, MessageType} from \"../../types/types\";\nimport React from \"react\";\nimport {withAuthRedirect} from \"../../hoc/withAuthRedirect\";\n\ntype StateToProps = {\n    dialogs: Array<DialogType>\n    messages: Array<MessageType>\n}\n\ntype DispatchToProps = {\n    sendMessage: (messageText: string) => void\n}\n\ntype Props = StateToProps & DispatchToProps\n\nclass DialogsContainer extends React.Component<Props> {\n    render() {\n        const {messages, dialogs, sendMessage} = this.props;\n\n        return (\n            <Dialogs messages={messages} dialogs={dialogs} sendMessage={sendMessage}/>\n        )\n    }\n}\n\nconst mapStateToProps = (state: AppStateType): StateToProps => {\n    return {\n        dialogs: getDialogs(state),\n        messages: getMessages(state)\n    }\n}\n\nexport default compose<React.ComponentType>(\n    connect<StateToProps, DispatchToProps, {}, AppStateType>(mapStateToProps, {\n        sendMessage: actions.sendMessage,\n    }),\n    withAuthRedirect,\n)(DialogsContainer)","import React from 'react';\nimport {Redirect} from \"react-router-dom\";\nimport {connect} from \"react-redux\";\nimport {getIsAuthSelector} from \"../Redux/selectors/authSelectors\";\nimport {AppStateType} from \"../Redux/redux-store\";\n\nconst mapStateToProps = (state: AppStateType) => {\n    return {\n        isAuth: getIsAuthSelector(state),\n    }\n}\n\ntype StateToProps = {\n    isAuth: boolean\n}\n\nexport function withAuthRedirect<WCP>(WrappedComponent: React.ComponentType<WCP>) {\n    const RedirectComponent: React.FC<StateToProps> = (props) => {\n        const {isAuth, ...restProps} = props\n\n        if (!props.isAuth) {\n            return <Redirect to={'/login'}/>\n        }\n\n        return <WrappedComponent {...restProps as WCP} />\n    }\n\n    return connect<StateToProps, {}, WCP, AppStateType>(mapStateToProps)(RedirectComponent)\n}"],"sourceRoot":""}